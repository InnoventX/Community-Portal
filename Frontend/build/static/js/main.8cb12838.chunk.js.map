{"version":3,"sources":["photos/logo.svg","shared/context/AuthContext.js","shared/components/validators.js","shared/components/Input.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/components/UIElements/ErrorModal.js","shared/components/ImageUpload.js","user/components/Authenticate.jsx","photos/ask-add.svg","shared/components/PortalNavbar.jsx","portal home/components/Categories.js","photos/answer.svg","portal home/components/Question.js","portal home/components/QuesList.js","portal home/pages/PortalHome.jsx","shared/hoocks/auth-hook.js","photos/ratings.svg","photos/update.svg","photos/delete.svg","photos/add-answer.svg","photos/show-more.svg","photos/rate.svg","portal home/pages/QuesPage.js","photos/post.svg","portal home/pages/CatQuestions.js","portal home/pages/UserQuestions.js","shared/hoocks/form-hook.js","portal home/pages/NewQuestion.js","portal home/pages/UpdateQues.js","portal home/pages/UpdateAnswer.js","portal home/pages/UserAnswers.js","portal home/pages/SavedAnswers.js","user/components/Reset.js","user/components/NewPassword.js","courses portal/components/Course.js","courses portal/components/AllCourses.js","courses portal/pages/HomePage.js","courses portal/pages/CoursePage.js","courses portal/pages/SubTopic.js","courses portal/pages/FirstSubTopic.js","courses portal/pages/UserCourses.js","App.js","reportWebVitals.js","index.js"],"names":["AuthContext","createContext","isLogedIn","token","userId","login","logout","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouch","Input","props","useReducer","inputState","dispatch","handleChange","event","target","handleTouch","id","onInput","useEffect","element","name","className","placeholder","autoComplete","onChange","onBlur","rows","label","class","style","color","errorMessage","LoadingSpinner","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","ErrorModal","heading","error","ImageUpload","filePickerRef","useRef","useState","file","setFile","isVaild","setIsValid","previewUrl","setPreviewUrl","fileReader","FileReader","onload","result","readAsDataURL","Fragment","display","ref","accept","pickedFile","fileIsValid","files","center","previewClass","src","alt","preventDefault","current","click","formReducer","formIsValid","inputId","inputs","Authenticate","auth","useContext","onSubmit","setOnSubmit","isLogin","setIsLogin","showImageUpload","setShowImageUpload","email","password","formState","isLoading","setIsLoading","setError","handleInput","useCallback","setData","handleSubmit","a","fetch","method","headers","body","JSON","stringify","response","json","responseData","message","Error","user","console","log","formData","FormData","append","image","schoolName","code","logo","width","margin","querySelector","disabled","undefined","prevMode","href","PortalNavbar","search","setSearch","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","exact","ipValue","filter","toUpperCase","title","querySelectorAll","i","h4","textContent","indexOf","searchkey","marginLeft","textDecoration","fontSize","marginTop","Categories","categories","allCategories","map","category","index","Question","userImage","height","process","userName","wholeQuestion","substring","answer","float","answers","QuesList","allQuestions","question","PortalHome","logoutTimer","setAllQuestions","questions","sendRequest","QuesPage","editorRef","history","useHistory","deleteSection","setDeleteSection","quesId","useParams","quesID","setQuestion","setAnswers","setAnsGiven","submitAnswer","setSubmitAnswer","stopIncerement","setStopIncrement","showAllAnswers","setShowAllAnswers","subAnswer","setSubAnswer","temp","setTemp","sholudSubmitAnswer","setSholudSubmitAnswer","answerImage","setAnswerImage","showDeleteSection","qOa","errorHandler","showSubAnswerDiv","answerId","others","getElementsByClassName","subAnsDiv","handleSubAnswer","subAns","forEach","ans","subAnswers","getSubAnswers","getSubAnswersData","nowPostAns","getContent","split","prevValue","deleteQuestion","push","deleteAnswer","incrementRating","saveAnswer","postSubAns","postDiv","showPostSection","onInit","evt","editor","initialValue","init","menubar","plugins","toolbar","content_style","rate","clssName","rating","ratings","showmore","CatQuestions","catID","categoryQuestions","setCategoryQuestions","UserQuestions","userQuestions","setUserQuestions","useForm","initialInputs","initialFormValidity","inputData","formValidity","NewQuestion","setUserName","submitHandler","UpdateQues","setFormData","UpdateAnswer","questionId","UserAnswers","quesAns","setQuesAns","qa","_id","SavedAnswers","Reset","setEmail","e","then","res","data","M","toast","html","classes","catch","err","NewPassword","setPassword","Course","description","para","price","lastSeenSectionId","AllCourses","courses","course","desc","totalTime","HomePage","allCourses","setAllCourses","CoursePage","courseId","setCourse","enrollCourseHandler","topics","subTopics","fontWeight","marginBottom","des","marginRight","topic","data-bs-toggle","data-bs-target","topicName","aria-labelledby","data-bs-parent","subTopic","sectionName","SubTopic","subTopicId","subtopic","setSubTopic","section","courseName","videoLink","FirstSubTopic","UserCourses","myCoursesData","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.8cb12838.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d1776b8b.svg\";","import {createContext} from 'react';\n\nexport const AuthContext = createContext(\n    {\n        isLogedIn:false,\n        token:null,\n        userId:null,\n        login:() => {},\n        logout:() => {}\n    }\n);","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React,{useReducer,useEffect} from 'react';\n\nimport {validate} from './validators';\nimport \"./Input.css\";\n\nconst inputReducer = (state,action) => {\n    switch(action.type){\n        case 'CHANGE':\n            return{\n                ...state,\n                value:action.val,\n                isValid:validate(action.val,action.validators)\n            }\n        case 'TOUCH':\n            return{\n                ...state,\n                isTouch:true\n            }\n        default:\n            return state\n    }\n}\n\nconst Input = (props) =>  {\n\n    const [inputState , dispatch] = useReducer(inputReducer, {\n        value:props.value || \"\",\n        isValid:props.isValid || false,\n        isTouch:props.isTouch || false\n    })\n\n\n    const handleChange = (event) => {\n        dispatch({\n            type:'CHANGE',\n            val:event.target.value,\n            validators:props.validators\n        });\n    }\n\n    const handleTouch = () => {\n        dispatch({\n            type:\"TOUCH\"\n        })\n    }\n\n    const {id, onInput} = props;\n    const {value,isValid} = inputState;\n\n    useEffect(() =>{\n        onInput(id,value,isValid)\n    },[id,value,isValid,onInput]);\n\n    var element = ( props.element === \"input\") ? (\n            <input \n                id={props.id}\n                name={props.name}\n                className={props.className}\n                type={props.type}\n                placeholder={props.placeholder}\n                value={inputState.value}\n                autoComplete=\"off\"\n                onChange={handleChange}\n                onBlur={handleTouch}\n            /> \n        ): (\n            <textarea\n                id={props.id}\n                className={props.className || \"text-area\"}\n                rows={props.rows || 1}\n                placeholder={props.placeholder}\n                value={inputState.value}\n                onChange={handleChange}\n                onBlur={handleTouch}\n            />\n        )\n\n    return(\n        <div>\n            <label>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouch && <p className=\"error\"><i class=\"fas fa-exclamation-triangle\" style={{color:\"red\"}}></i>  {props.errorMessage}</p>}\n        </div>\n    )\n}\n\n\nexport default Input;","import React from 'react';\n// import roundlogo from '../../photos/round-logo.svg'\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      {/* <img src={roundlogo} alt=\"logo\"></img> */}\n      <div class=\"loader\">\n        <span></span>\n        <span></span>        \n        <span></span>\n        <span></span>\n    </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;","import React from 'react';\n\nimport \"./ErrorModal.css\";\n\nconst ErrorModal = (props) => {\n    return(\n        <div className=\"show-error-section\">\n            <div className=\"modal__header\">\n                <h2>{props.heading}</h2>\n            </div>\n            <div className=\"modal__content\">\n                <h5>{props.error}</h5>\n            </div>\n        </div>\n    )\n} \n\nexport default ErrorModal;","import React,{useEffect, useRef, useState} from 'react';\r\n\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n\r\n    const filePickerRef = useRef();\r\n\r\n    const [file , setFile] = useState();\r\n    // If the imagee is option then we don't perform validation by setting isValid = true\r\n    const [isValid , setIsValid] = useState(props.isVaild || false);\r\n    const [previewUrl , setPreviewUrl] = useState();\r\n\r\n    const pickHandler = (event) => {\r\n        let fileIsValid = isValid;\r\n        let pickedFile;\r\n\r\n        // Checking for the single image file\r\n        if(event.target.files && event.target.files.length === 1){\r\n            pickedFile = event.target.files[0];\r\n            // useEffect will be triggered when the file state is changed\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid=true;\r\n        }else{\r\n            setIsValid(false);\r\n            fileIsValid=false;\r\n        }\r\n        props.onInput(props.id, pickedFile , fileIsValid);\r\n    }\r\n\r\n    const pickImageHandler = (event) => {\r\n        event.preventDefault();\r\n        // Shows the file input tag\r\n        filePickerRef.current.click();\r\n    }\r\n\r\n    // This will be triggered when the file state is changed\r\n    useEffect(() => {\r\n        if(!file){\r\n            return;\r\n        }\r\n        // For reading the file\r\n        const fileReader = new FileReader();\r\n\r\n        // When the image is loaded\r\n        fileReader.onload = () => {\r\n            // Store the image url\r\n            setPreviewUrl(fileReader.result);\r\n        }\r\n\r\n        // Read the file as data url to store the url of image\r\n        fileReader.readAsDataURL(file);\r\n    },[file]);\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* Takes image files as input */}\r\n            <input \r\n                id={props.id}\r\n                style={{display:\"none\"}}\r\n                ref={filePickerRef}\r\n                type=\"file\"\r\n                accept=\".jpg,.jpeg,.png\"\r\n                onChange={pickHandler}\r\n            />\r\n\r\n            {/* Showing the image preview */}\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className={`image-upload__preview ${props.previewClass}`}>\r\n                    { previewUrl && <img src={previewUrl} alt=\"Preview\" /> }\r\n                    { !previewUrl && <p>Please pick an image</p>}\r\n                </div>\r\n\r\n                {/* Show the input tag if the button is clicked */}\r\n                <button class=\"btn btn-warning\"onClick={pickImageHandler}>Pick Image</button>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ImageUpload;","import React,{useState,useContext,useReducer,useCallback} from 'react';\r\n// import {useHistory} from 'react-router-dom';\r\n\r\nimport logo from '../../photos/logo.svg';\r\nimport './SignIn.css';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from \"../../shared/components/validators\";\r\n// import {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport ImageUpload from \"../../shared/components/ImageUpload\";\r\n\r\n// This function will be called whenever we use \"dispatch\"\r\nconst formReducer = ( state, action) => {\r\n\r\n    // Checks the action type\r\n    switch( action.type ){\r\n\r\n        case 'INPUT_CHANGE':\r\n            // Initially the form is valid\r\n            let formIsValid = true;\r\n\r\n            // Traversing through all inputs\r\n            for(const inputId in state.inputs){\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n\r\n                // Taking the Input which is chaning right now\r\n                if(inputId === action.inputId){\r\n                    // The form will only be valid if the changed \"Input\" is valid\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else{\r\n                    // Setting the default values for the rest input components\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return{\r\n                // Returning the State after the input state is changed\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId]:{\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n\r\n        // For setting the data which we pass\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs:action.inputs,\r\n                isValid:action.formIsValid\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction Authenticate(){\r\n\r\n    // Using AuthContext for user login detalis(userId)  \r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for submit button\r\n    const [onSubmit , setOnSubmit] = useState(false);\r\n\r\n    // State which display Login form when set to true\r\n    const [isLogin , setIsLogin] = useState(true);\r\n\r\n    // This state will decided to show the image section or not \r\n    const [showImageUpload , setShowImageUpload] = useState(false);\r\n\r\n    // Initial state of form(login)  \r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n       inputs:{\r\n        email:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n        password:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n    },\r\n        isValid:false\r\n    });\r\n\r\n    // State For Loading Spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for error modal or block\r\n    const [error, setError] = useState();\r\n\r\n    // Trigers whenever input changes\r\n    const handleInput = useCallback((id , value, isValid) => {\r\n        dispatch({\r\n            type:'INPUT_CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n\r\n    },[]);\r\n\r\n    // To set the data after the switching from signup->login or visa-versa \r\n    const setData = (inputs,formIsValid) => {\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs:inputs,\r\n            formIsValid:formIsValid\r\n        })\r\n    }\r\n\r\n    // Triger when we click the \"SWITCH\" button\r\n    const handleSwitch = (event) => {\r\n\r\n        // This prevents the form to get submitted\r\n        setOnSubmit(false);\r\n\r\n        if(!isLogin){\r\n            // Signup -> Login\r\n            setData({\r\n                ...formState.inputs,\r\n                name:undefined,\r\n                image:undefined,\r\n                schoolName:undefined,\r\n                code:undefined\r\n            },\r\n            formState.inputs.email.isValid && formState.inputs)\r\n        }else{\r\n            // Login -> Signup\r\n            setData(\r\n                {\r\n                  ...formState.inputs,\r\n                  name: {\r\n                    value: '',\r\n                    isValid: false\r\n                  },\r\n                  image:{ \r\n                      value: null,\r\n                      isValid: true\r\n                  },\r\n                  schoolName: {\r\n                    value: '',\r\n                    isValid: false\r\n                  },\r\n                  code: {\r\n                    value: '',\r\n                    isValid: false\r\n                  }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin(prevMode => !prevMode);\r\n    }\r\n\r\n    // Triggers when the form is submitted\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // If the submit button is clicked \r\n        if(onSubmit){\r\n\r\n            // If the user is Loggin in\r\n            if(isLogin){\r\n                try{\r\n                    // Showing the Loaading spinney till the data is arrived\r\n                    setIsLoading(true);\r\n\r\n                    // Getting the data from api\r\n                    const response = await fetch(\"${process.env.REACT_APP_BACKEND_URL}/user/login\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n\r\n                    // Converting the data into json format\r\n                    const responseData = await response.json();\r\n\r\n                    // It the error is comming as a response\r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n\r\n                    // Getting userId in Frontend\r\n                    auth.login(responseData.user.id, responseData.token);\r\n                }catch(err){\r\n                    console.log(err);\r\n\r\n                    // Showing the Error modal in frontend\r\n                    setError(err.message || 'Something wentt wrong, please try again');\r\n                }\r\n\r\n                // After the data is arrived the remove the loading spinner\r\n                setIsLoading(false);\r\n            }else{\r\n                try{\r\n                    setIsLoading(true);\r\n\r\n                    // Using FormData to pass the image as url\r\n                    const formData = new FormData();\r\n                    formData.append('name',formState.inputs.name.value);\r\n                    formData.append('image',formState.inputs.image.value);\r\n                    formData.append('schoolName',formState.inputs.schoolName.value);\r\n                    formData.append('code',formState.inputs.code.value);\r\n                    formData.append('email',formState.inputs.email.value);\r\n                    formData.append('password',formState.inputs.password.value);\r\n\r\n                    const response = await fetch(\"${process.env.REACT_APP_BACKEND_URL}/user/signup\",{\r\n                        method: 'POST',\r\n                        body:formData\r\n                    });\r\n        \r\n                    const responseData = await response.json();\r\n        \r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n                    \r\n                    auth.login(responseData.user.id, responseData.token);\r\n                }catch(err){\r\n                    console.log(err);\r\n                    setError(err.message || 'Something went wrong, please try again.');\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Triggered when the submit button is clicked\r\n    const haldleSubmitButton = (event) => {\r\n        event.preventDefault();\r\n        // The form should only be submitted now\r\n        setOnSubmit(true);\r\n        handleSubmit(event);\r\n    }\r\n\r\n    const showImageUploadHandler = (event) => {\r\n        event.preventDefault();\r\n        setShowImageUpload(true);\r\n        const btn = document.querySelector('#add-image-btn-auth');\r\n        btn.style.display = 'none';\r\n    }\r\n\r\n    // To handle error\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )} \r\n\r\n            {/* Showing Loading Spinner till the data is arrived */}\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n                <div id=\"wrapper\">\r\n                    <div className=\"signIn-text-DIV\">\r\n                        <h1 className=\"signIN-text\">LEARN.</h1>\r\n                        <h1 className=\"signIN-text\">IMPLEMENT.</h1>\r\n                        <h1 className=\"signIN-text\">INNOVATE.</h1>\r\n                    </div>\r\n                    <div className={ isLogin ? 'my-form' : 'my-form-2'}>\r\n                        <img className=\"logo2\" src={logo}/>\r\n\r\n                        {/* Authentication Form */}\r\n                        <form onSubmit={handleSubmit}>\r\n\r\n                            {/* Display \"Name\" only if it is in Signup form(!isLogin) */}\r\n                            { !isLogin && (\r\n                                <div>\r\n                                    <span className=\"icon\"><i class=\"fas fa-user\"></i></span>  \r\n                                    <Input \r\n                                        id=\"name\"\r\n                                        element=\"input\"\r\n                                        placeholder=\"User Name\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control sign-in-Box\"\r\n                                        value={formState.inputs.name.value}\r\n                                        onInput = {handleInput}\r\n                                        validators = {[VALIDATOR_REQUIRE()]}\r\n                                        errorMessage=\"Please enter a valid user name\"\r\n                                    />\r\n\r\n                                    {/* If the user wants to upload image in question */}\r\n                                    { showImageUpload && <ImageUpload id='image' onInput={handleInput} center isValid={true}/> }\r\n                                    <button id=\"add-image-btn-auth\" style={{width:\"84%\",margin:\"1% 12%\"}}class=\"btn btn-warning\" onClick={showImageUploadHandler}>Upload User Image</button>\r\n\r\n                                    <span className=\"icon\"><i class=\"fas fa-user\"></i></span>  \r\n                                    <Input \r\n                                        id=\"schoolName\"\r\n                                        element=\"input\"\r\n                                        placeholder=\"School Name\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control sign-in-Box\"\r\n                                        value={formState.inputs.schoolName.value}\r\n                                        onInput = {handleInput}\r\n                                        validators = {[VALIDATOR_REQUIRE()]}\r\n                                        errorMessage=\"Please enter a valid school name\"\r\n                                    />\r\n\r\n                                    <span className=\"icon\"><i class=\"fas fa-user\"></i></span>  \r\n                                    <Input \r\n                                        id=\"code\"\r\n                                        element=\"input\"\r\n                                        placeholder=\"Enter Code\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control sign-in-Box\"\r\n                                        value={formState.inputs.code.value}\r\n                                        onInput = {handleInput}\r\n                                        validators = {[VALIDATOR_MINLENGTH(6)]}\r\n                                        errorMessage=\"Please enter a valid 6-digit code\"\r\n                                    />\r\n                                </div>\r\n                                )\r\n                            }\r\n\r\n                            {/* Email & password input components */}\r\n                            <div className=\"email-div\"> \r\n                                <span className=\"icon\"><i class=\"far fa-envelope\"></i></span>  \r\n                                <div className=\"input\">\r\n                                <Input \r\n                                    id=\"email\"\r\n                                    element=\"input\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"email form-control\"\r\n                                    value={formState.inputs.email.value}\r\n                                    onInput={handleInput}\r\n                                    validators={[VALIDATOR_EMAIL()]}\r\n                                    errorMessage=\"Please enter a valid email\"\r\n                                    >\r\n                                </Input>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <span className=\"icon password-icon\"><i class=\"fas fa-key\"></i></span>  \r\n                                <Input\r\n                                    id=\"password\"\r\n                                    element=\"input\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"password form-control\"\r\n                                    value={formState.inputs.password.value}\r\n                                    onInput={handleInput}\r\n                                    validators={[VALIDATOR_MINLENGTH(6)]}\r\n                                    errorMessage=\"Please enter a password of length 6\"\r\n                                >\r\n                                </Input>\r\n                            </div>\r\n\r\n                            {/* This button will be disabled if the form is not valid */}\r\n                            <div className=\"buttons\">\r\n                                {/* This button will be disabled if the form is not valid */}\r\n                                <button className=\"btn btn-success LOGIN\" disabled={!formState.isValid} onClick={haldleSubmitButton}>{ isLogin ? \"Login\" : \"Signup\" }</button>\r\n\r\n                                {/* Switching button */}\r\n                                <a className=\"SIGNUP\" onClick={handleSwitch}>{ isLogin ? \"Sign up\" : \"Login\" }?</a>\r\n                                <br />\r\n                                { isLogin && <a className=\"SIGNUP\" href=\"/reset\">Forget Password</a>}\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Authenticate; ","export default __webpack_public_path__ + \"static/media/ask-add.32aeeb7f.svg\";","import React,{useState,useContext} from 'react';\nimport {NavLink} from 'react-router-dom';\n\nimport ask from '../../photos/ask-add.svg';\nimport logo from '../../photos/logo.svg';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport \"./PortalNavbar.css\";\nimport {AuthContext} from '../../shared/context/AuthContext';\n\nfunction PortalNavbar(){\n\n    const [search,setSearch] = useState(\"\");\n    const auth = useContext(AuthContext);\n\n    function handleSearch(event){\n        const ipValue = event.target.value;\n        searchkey(ipValue);\n        setSearch(ipValue);\n    }\n\n    function handleClick(){\n        // alert(\"Search: \" + search);\n        setSearch(\"\");\n    }\n    \n    function searchkey(search) {\n        let filter = search.toUpperCase();\n        let title = document.querySelectorAll(\"h4.question-title\");\n        for (let i = 0; i < title.length; i++) {\n            let h4 = document.querySelectorAll(\"h4.question-title\")[i];\n            if (h4) {\n                let textValueh = h4.textContent;\n    \n                if (textValueh.toUpperCase().indexOf(filter) > -1) {\n                    document.querySelectorAll(\"div.question-container\")[i].style.display = \"\";\n                } else {\n                    document.querySelectorAll(\"div.question-container\")[i].style.display = \"none\";\n                }\n            }\n        }\n    \n    }\n \n    return(\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-dark\">\n            <a className=\"navbar-brand\" href=\"#\">\n                <img className=\"logo\" src={logo} alt=\"logo\" />\n                <span style={{color: \"red\"}}>I</span>NNOVENT<span style={{color: \"red\"}}>X</span>\n            </a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarSupportedContent\">\n                    <ul className=\"nav nav-pills justify-content-right\">\n                        <li className=\"nav-item\">\n                            <NavLink to=\"/\" className=\"nav-link\" exact>Home</NavLink>\n                        </li>\n\n                        { !auth.isLogedIn && (  \n                            <li className=\"nav-item\">\n                                <div className=\"portal-div\">\n                                    <NavLink to=\"/authenticate\" className=\"nav-link PORTAL glow-on-hover\">Portal</NavLink>\n                                </div>\n                            </li>\n                            )\n                        }\n\n                        { auth.isLogedIn && ( \n                            <React.Fragment>\n\n                            {/* <li className=\"nav-item\">\n                                <NavLink to=\"/courses\" style={{textDecoration:\"none\"}} className=\"nav-link\">\n                                    Courses\n                                </NavLink>\n                            </li> */}\n\n                            {/* <li className=\"nav-item\">\n                                <NavLink to={`/${auth.userId}/courses`} style={{textDecoration:\"none\"}} className=\"nav-link\">\n                                    My Courses\n                                </NavLink>\n                            </li> */}\n\n                            <li className=\"nav-item\">\n                                <NavLink to={`/${auth.userId}/questions`} className=\"nav-link\">My Ques</NavLink>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <NavLink to={`/${auth.userId}/answers`} className=\"nav-link\">My Ans</NavLink>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <NavLink to={`/${auth.userId}/savedAnswers`} className=\"nav-link\">Save</NavLink>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <form className=\"form-inline my-2 my-lg-0\">\n                                    <div className=\"button-in\">\n                                        <input  className=\"form-control search\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={handleSearch}/>\n                                        <button className=\"search-btn\" onClick={handleClick}><SearchIcon style={{ marginLeft: \"12%\", color:\"white\"}}/></button>\n                                    </div>\n                                </form>                            \n                            </li>\n                            \n                            <li className=\"nav-item\">\n                                <NavLink to=\"/question/new\" style={{textDecoration:\"none\"}} className=\"nav-link\">\n                                    <i class=\"fas fa-plus-circle\"></i> ASK\n                                </NavLink>\n                            </li>\n                            \n                            <li className=\"nav-item\">\n                                <button onClick={auth.logout} style={{textDecoration:\"none\"}} className=\"nav-link logout-btn\">\n                                     LOGOUT\n                                </button>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <NavLink to=\"/\" className=\"PROFILE\"><AccountCircleIcon style={{fontSize:\"2.7rem\",marginLeft:\"90%\", marginTop:\"12%\"}} /></NavLink>\n                            </li>\n                            \n                            </React.Fragment>\n                            )\n                        }\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default PortalNavbar;","import React,{useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport \"./Categories.css\";\n\nconst Categories = (props) => {\n\n    // Ctaegories state\n    const [categories,setCategorite]=useState([\"Arduino\",\"RPI\",\"Augmented Reality\",\"Virtual reality\",\"ROS\",\"Dron Tech\",\"my tech\"]);\n\n    // mapping all the categories into the Links\n    const allCategories = categories.map((category , index) => {\n        return (\n            <Link key={index} to={`/questions/${category}`} className=\"single-category\">{category}</Link>\n        )  \n    });\n\n    return(\n        // Showing all the categories section\n        <React.Fragment>\n            <h6 className=\"category-heading\">ALL CATEGORIES</h6>\n            <div className=\"categories-div\">\n                {allCategories}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Categories;\n","export default __webpack_public_path__ + \"static/media/answer.6ae7d385.svg\";","// This component is responsible for rendering the question block on Portal's home page\n\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport answer from '../../photos/answer.svg';\n\nimport \"./Question.css\";\n\nconst Question = (props) => {\n    return(\n        <React.Fragment>\n            \n                <div className=\"question-container\">\n                    <div className=\"user-icon\">\n                        { props.userImage ? (\n                            <img className=\"user-icon\" style={{height:\"2.8rem\"}} src={process.env.REACT_APP_ASSET_URL + `/${props.userImage}`} alt=\"User\"/>\n                        ):(\n                            <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\n                        )}\n                        \n                    </div>\n                    <h6 className=\"student-name\">{props.userName}</h6>\n                    <h6 className=\"category\">{props.category}</h6>\n                    <h4 className=\"question-title\">{props.title}</h4>\n                    <p className=\"read-more\">{props.wholeQuestion.substring(0,120)}\n                        <Link to={`/ques/${props.id}`} style={{textDecoration:\"none\"}}> ...(read more)</Link>\n                    </p>\n                    \n                    <Link to={`/ques/${props.id}`} style={{textDecoration:\"none\"}}>\n                            <button className=\"btn btn-warning\"><img className=\"answer-img\" src={answer} style={{width:\"20%\", height:\"20%\", float: \"none\"}}></img><u style={{marginLeft:\"4%\"}}> {props.answers.length} Answers</u></button>\n                    </Link>                \n                </div>\n        </React.Fragment>\n\n    );\n}\n\nexport default Question;","// This component is responsible for rendering all the questions on the Portal's home page\nimport React from 'react';\n\nimport Question from \"./Question\";\nimport \"./QuesList.css\"\n\n// Passing all the information of single question to \"Question\" component\nconst QuesList = (props) => {\n\n    return(\n        <React.Fragment>\n            <h6 className=\"answers-heading\">FEED</h6>\n            <hr/>\n            {\n                props.allQuestions.map((question) => {\n                    return (<Question \n                        key={question.id}\n                        id={question.id}\n                        userId = {question.userId}\n                        userName = {question.userName}\n                        userImage = {question.userImage}\n                        title = {question.title}\n                        wholeQuestion = {question.wholeQuestion}\n                        answers= {question.answers}\n                        category={question.category}\n                    />\n                    );\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default QuesList;\n","import React,{useState , useEffect} from 'react';\n\nimport \"./PortalHome.css\";\nimport Categories from \"../components/Categories\";\nimport QuesList from \"../components/QuesList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nfunction PortalHome(){\n\n    // State for  loading spinner\n    const [isLoading , setIsLoading] = useState(false);\n    \n    // State for Error handling\n    const [error , setError] = useState();\n\n    // State which renders all the questions\n    const [allQuestions , setAllQuestions] = useState();\n\n    // Using useEffect hoock because this should be rendered only once \n    useEffect(() => {\n\n        // Making another function because we cannot write async in useEffect function\n        const sendRequest = async () => {\n\n            // Loading the spinner till the data arrived\n            setIsLoading(true);\n\n            // Getting all the questions from the api\n            try{\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + \"/question\");\n\n                const responseData = await response.json();\n\n                if(responseData.message){\n\n                    // Initially if there is no questions available then\n                    if(responseData.message === \"No questions found\"){\n                        setAllQuestions(null);\n                    }\n                    else{\n                        throw new Error(responseData.message);\n                    }\n                }\n\n                // Storing the response comming from backend into allQuestions State\n                setAllQuestions(responseData.questions);\n            }catch(err){\n                console.log(err);\n\n                // Setting the error message in frontend\n                setError(err.message || 'Something went wrong, please try again');\n            }\n            \n            // Truning off the Loading spinner\n            setIsLoading(false);\n        }\n\n        // Calling our function\n        sendRequest();\n    },[]);\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    return(\n        <React.Fragment>\n        \n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n                \n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            {/* Showing Home page */}\n            <div className=\"home\">\n                {/* Showing all the categories */}\n                { !isLoading && allQuestions && (\n                    <div className=\"left\">\n                        <Categories />\n                    </div>\n                )}\n                <div className=\"right\">\n                    {/* Questions will be only rendered if the data is arrived from the backend */}\n                    { !isLoading  && allQuestions && <QuesList allQuestions={allQuestions} />}\n\n                    {/* If there are no questions in the database */}\n                    { !isLoading && !allQuestions &&  <h1>No questios available</h1>}\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default PortalHome;\n","import {useCallback,useState,useEffect} from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n    \r\n    const [token , setToken] = useState();\r\n    // Taken an extra state to update the tokenExpirationDate for automatic logout\r\n    const [tokenExpirationDate , setTokenExpirationDate] = useState();\r\n    // To maintain the userID comming from BACKEND \r\n    const [userId , setUserId ] = useState(null);\r\n\r\n\r\n    // useCallback is Used to avoid RECREATION OF FUNCTION & to avoid INFINITE LOOPS\r\n    const login = useCallback((uid, token , expirationDate) => {\r\n        setToken(token);\r\n        // useing the userID\r\n        setUserId(uid);\r\n\r\n        // Expiration time will be 1hour greater then current time\r\n        const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n\r\n        setTokenExpirationDate(tokenExpirationDate);\r\n\r\n        // To store the userData in the client's browser so that he can automatically loggedin\r\n        localStorage.setItem(\r\n        'userData',\r\n        JSON.stringify({\r\n            userId:uid, \r\n            token:token, \r\n            expiration:tokenExpirationDate.toISOString()\r\n        })\r\n        );\r\n    },[])\r\n\r\n    const logout = useCallback((uid) => {\r\n        setToken(null);\r\n        setTokenExpirationDate(null);\r\n        setUserId(null);\r\n        localStorage.removeItem(\"userData\");\r\n    },[]);\r\n\r\n    // Used to automatically logedout the user when time expired \r\n    useEffect(() => {\r\n        if(token && tokenExpirationDate){\r\n        const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n        logoutTimer = setTimeout(logout, remainingTime);\r\n        }else{\r\n        clearTimeout(logoutTimer);\r\n        }\r\n    },[token,logout,tokenExpirationDate])\r\n\r\n    // Used to automatically logedin the user\r\n    useEffect(() => {\r\n        const storedData = JSON.parse(localStorage.getItem('userData'));\r\n\r\n        // Checking the expiration the of token & if it is not expired then only we logedin the user\r\n        if(storedData && storedData.token && new Date(storedData.expiration) > new Date()){\r\n            login(storedData.userId , storedData.token, new Date(storedData.expiration));\r\n        }\r\n    },[login]);\r\n\r\n    return {token,userId,login,logout};\r\n}","export default __webpack_public_path__ + \"static/media/ratings.95755d40.svg\";","export default __webpack_public_path__ + \"static/media/update.bac8f66c.svg\";","export default __webpack_public_path__ + \"static/media/delete.f94bcb48.svg\";","export default __webpack_public_path__ + \"static/media/add-answer.e837c3a0.svg\";","export default __webpack_public_path__ + \"static/media/show-more.6998221a.svg\";","export default __webpack_public_path__ + \"static/media/rate.ea905ce2.svg\";","import React,{useState, useContext, useEffect, useRef} from 'react';\r\nimport TinyMCE from 'react-tinymce';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport {useParams, Link , useHistory} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nimport \"./QuesPage.css\";\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport update from '../../photos/update.svg';\r\nimport del from '../../photos/delete.svg';\r\nimport addans from '../../photos/add-answer.svg';\r\nimport ratings from '../../photos/ratings.svg';\r\nimport showmore from '../../photos/show-more.svg';\r\nimport rate from '../../photos/rate.svg';\r\nimport post from '../../photos/post.svg';\r\nimport ImageUpload from \"../../shared/components/ImageUpload\";\r\n\r\n\r\nconst QuesPage = () => {\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    // Using history to get redirected to \"/\" route if the question is deleted\r\n    const history = useHistory();\r\n\r\n    // For components which shoul be rendered when the user is authenticated\r\n    const auth = useContext(AuthContext);\r\n\r\n    // State to render delete modal for question & answer\r\n    const [deleteSection , setDeleteSection] = useState();\r\n\r\n    // Getting QuestionID from the route\r\n    const quesId = useParams().quesID;\r\n\r\n    // State which are used to store data from \"GET question request\" \r\n    const [question,setQuestion] = useState();\r\n    const [answers , setAnswers] = useState();\r\n    const [error, setError] = useState();\r\n    const [isLoading , setIsLoading] = useState(false);\r\n\r\n    // Answer STATE used after adding other ANSWER\r\n    const [ansGiven, setAnsGiven] = useState();\r\n    const [submitAnswer , setSubmitAnswer] =  useState(false);\r\n\r\n    // State for handle increment of rating for answers\r\n    const [stopIncerement , setStopIncrement] = useState(false);\r\n\r\n    // Showing all the answers only if when it is true when we click \"SHOW MORE\" button\r\n    const [showAllAnswers,setShowAllAnswers] = useState(false);\r\n\r\n    // State for sub-answer\r\n    const  [subAnswer , setSubAnswer] = useState();\r\n\r\n    // For togalling the sub-answer-div\r\n    const [temp , setTemp] = useState(0);\r\n\r\n    // This state will decided to show the image section or not \r\n    const [showImageUpload , setShowImageUpload] = useState(false);\r\n\r\n    // State used when the user want's to upload IMAGE in the answer to this question\r\n    const [sholudSubmitAnswer , setSholudSubmitAnswer] = useState(false); \r\n    const [answerImage , setAnswerImage] = useState({\r\n        value:null,\r\n        isValid:false\r\n    });\r\n\r\n    //////////////////////////////////////////////////////////// Functions /////////////////////////////////////////////////////////////////\r\n\r\n    // Showing POST ANSWER block\r\n    const showPostSection = () => {\r\n        // It will display the GiveAnswer block when we chick the button and hide when we again click it.\r\n        const postDiv = document.querySelector(\".post-ans-div\");\r\n        if(postDiv.style.display === \"none\"){\r\n            postDiv.style.display = \"block\";\r\n        }\r\n        else{\r\n            postDiv.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // Updating the ANSWER state\r\n    const handleGivenAns = (event) => {\r\n        const ans = event.target.getContent();\r\n        console.log(ans);\r\n        setAnsGiven(ans);\r\n    }\r\n\r\n    // Showing delete section\r\n    const showDeleteSection = (qOa) => {\r\n        // event.target.name will contain the name which shoul be deleted( Question 0r Answer )\r\n        const commingFrom = qOa;\r\n        setDeleteSection(commingFrom);\r\n    }\r\n\r\n    // Closing delete section\r\n    const cancleShowDeleteSection = () => {\r\n        setDeleteSection(null);\r\n    }\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    // When user clicks \"show more\" button\r\n    const handleShowAllAnswers = () => {\r\n        // Now stop displaying the button\r\n        const btn = document.querySelector(\".show-more-btn\");\r\n        btn.style.display=\"none\";\r\n        // switching the state to show all answers\r\n        setShowAllAnswers(true);\r\n    }\r\n\r\n    // Shows the Sub-Answer Section inside the answer\r\n    const showSubAnswerDiv = (answerId) => { \r\n        // For hiding all other sub-answer divs\r\n        const others = document.getElementsByClassName('sub-ans-div')\r\n        for(var i=0;i<others.length;i++){\r\n            others[i].style.display = \"none\";\r\n        }\r\n\r\n        const subAnsDiv = document.querySelector(`.sub-ans-div.ans-${answerId}`);\r\n        console.log(subAnsDiv.style.display)\r\n        // Bad logic for temp\r\n        if(subAnsDiv.style.display === \"none\" && (temp%2 === 0)){\r\n            subAnsDiv.style.display = \"block\";\r\n            setTemp(temp+1);\r\n        }else{\r\n            subAnsDiv.style.display = \"none\";\r\n            setTemp(temp+1);\r\n        }   \r\n    }\r\n\r\n    // Updates the sub-answer state\r\n    const handleSubAnswer = (event) => {\r\n        const subAns = event.target.value;\r\n        setSubAnswer(subAns);\r\n    }\r\n\r\n    // Shows the image upload preview section\r\n    const showImageUploadHandler = (event) => {\r\n        event.preventDefault();\r\n        setShowImageUpload(true);\r\n        const btn = document.querySelector('#add-image-btn');\r\n        btn.style.display = 'none';\r\n    }\r\n\r\n    // Setting the Image values\r\n    const imageInputHandler = (id,value,isValid) => {\r\n        setAnswerImage({\r\n            value:value,\r\n            isValid:isValid\r\n        });\r\n    }\r\n\r\n    // Triggers when the POST button is clicked for new Answer\r\n    const submitNewAnswer = (event) => {\r\n        event.preventDefault();\r\n        setSholudSubmitAnswer(true);\r\n        // Post the new Answer\r\n        nowPostAns(event);\r\n    }\r\n\r\n    /////////////////////////////////////////////// Functions sending request to backend API's ////////////////////////////////////////////\r\n\r\n    // Using useEffect hoock which renders question and it's answers,this should only be rendered when submitAnswer changes.  \r\n    useEffect(() => {\r\n\r\n        // Making another function because we cannot write async in useEffect function\r\n        const sendRequest = async () => {\r\n\r\n            try{\r\n                // Showing the loading spinner\r\n                setIsLoading(true);\r\n\r\n                // Getting question & all the answers of that perticular question\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/answer/${quesId}`);\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message && responseData.message!==\"No answers found of that question\"){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                // Assigning the backend responce to the frontend states\r\n                setQuestion(responseData.question);\r\n                // setAnswers(responseData.answers);\r\n\r\n                if(responseData.answers){\r\n                    responseData.answers.forEach(async (ans,index) => {\r\n                        if(ans.subAnswers.length !== 0){\r\n                            const getSubAnswers = await fetch(process.env.REACT_APP_BACKEND_URL + `/subAnswer/${ans.id}`);\r\n                            const getSubAnswersData = await getSubAnswers.json();\r\n                            \r\n                            if(getSubAnswersData.message){\r\n                                throw new Error(getSubAnswersData.message);\r\n                            }\r\n    \r\n                            ans.subAnswers = getSubAnswersData.subAnswers;\r\n                                  \r\n                        }\r\n                        if(index === (responseData.answers.length - 1)){\r\n                            setAnswers(responseData.answers);\r\n                            setIsLoading(false);\r\n                        }\r\n                    })\r\n\r\n                }else{\r\n                    setAnswers(null);\r\n                    setIsLoading(false);\r\n                }\r\n                \r\n            }catch(err){\r\n                console.log(err);\r\n\r\n                // Showing the error message comming from backend\r\n                setError(err.message);\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        sendRequest();\r\n    },[submitAnswer]);\r\n\r\n    // Posting the NEW ANSWER\r\n    const nowPostAns = async (event) => {\r\n        // Prevent the default when the button is clicked\r\n        event.preventDefault();\r\n\r\n        // If the submit button is clicked\r\n        if(sholudSubmitAnswer && editorRef.current){\r\n            let ans=editorRef.current.getContent();\r\n            ans=ans.split(\">\")[1];\r\n            ans=ans.split(\"<\")[0];\r\n\r\n            // Posting the answer using backend api\r\n            try{\r\n\r\n                // Using formData to also send the image \r\n                const formData = new FormData();\r\n                formData.append('userId',auth.userId);\r\n                formData.append('answer',ans);\r\n                formData.append('image',answerImage.value);\r\n\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/api/answer/${quesId}/`,{\r\n                    method:'POST',\r\n                    headers:{\r\n                        'Authorization':'Bearer ' + auth.token\r\n                    },\r\n                    body: formData\r\n                });\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n            }catch(err){\r\n                console.log(err);\r\n                // beacause we are doing multiple operations in backend\r\n                if(err.message !== \"WriteConflict error: this operation conflicted with another operation. Please retry your operation or multi-document transaction.\"){\r\n                    setError(err.message);\r\n                }\r\n            }\r\n            // Turning this state because we want to rerender the question with updation in answers array\r\n            setSubmitAnswer(prevValue => !prevValue);\r\n            setAnswerImage({\r\n                value:null,\r\n                isValid:false\r\n            });\r\n            setAnsGiven(null);\r\n            setShowImageUpload(false);\r\n        }\r\n    }\r\n\r\n    // Deleating the question\r\n    const deleteQuestion = async () => {\r\n\r\n        // Sending Request to delete the question \r\n        try{\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/question/${quesId}/`,{\r\n                method:'DELETE',\r\n                headers:{\r\n                    'Authorization':'Bearer ' + auth.token\r\n                }\r\n            });\r\n            const responseData = await response.json();\r\n\r\n            // If the question is deleted then redirectign to the root route where all the questions are displayed\r\n            if(responseData.message === \"Question deleted successfully\"){\r\n                history.push(\"/\");\r\n            }else{\r\n                // Throwing error if comming from backend\r\n                throw new Error(responseData.message);\r\n            }\r\n        }catch(err){\r\n            console.log(err);\r\n\r\n            // Setting error in frontend\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Deleting the answer\r\n    const deleteAnswer = async (event) => {\r\n        \r\n        // Getting answerId by the button name which triggers the event\r\n        const answerId = event.target.name;\r\n\r\n        // Sending the delete request\r\n        try{\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/answer/${answerId}`,{\r\n                method:'DELETE',\r\n                headers:{\r\n                    'Authorization':'Bearer ' + auth.token\r\n                }\r\n            });\r\n            const responseData = await response.json();\r\n            console.log(responseData.message);\r\n            // Rerendering this page by changing the submitAnswer state so that useEffect will be triggered after deleting answer\r\n            if(responseData.message === 'Deleted successfully'){\r\n                setDeleteSection(null);\r\n                setSubmitAnswer(prevValue => !prevValue);\r\n                setAnswerImage({\r\n                    value:null,\r\n                    isValid:false\r\n                });\r\n                setShowImageUpload(false);\r\n            }else{\r\n                // Throwing error comming from backend\r\n                throw new Error(responseData.message);\r\n            }\r\n        }catch(err){\r\n            console.log(err);\r\n            //Seting error in frontend\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Increments the rating of a particular answer\r\n    const incrementRating = async (answerId) => {\r\n        \r\n        // Sending update request to increment rating\r\n        try{\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/answer/rating/${answerId}`,{\r\n                method:'PATCH',\r\n                headers:{\r\n                    'Authorization':'Bearer ' + auth.token\r\n                }        \r\n            });\r\n            const responseData = await response.json();\r\n\r\n            // Throwing error comming from backend\r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            // A user is only allowed to increment the rating once so after incrementation disableing the button\r\n            setStopIncrement(true);\r\n\r\n            // Rerendering the question again by sending the question request from useEffect\r\n            setSubmitAnswer(prevValue => !prevValue)\r\n        }catch(err){\r\n            console.log(err);\r\n            // Setting error in frontend\r\n            setError(error);\r\n        }\r\n    }\r\n\r\n    const saveAnswer = async (answerId) => {\r\n        const userId = auth.userId;\r\n    \r\n        try{\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/user/${userId}/save/${answerId}`,{\r\n                method:'PATCH',\r\n                headers:{\r\n                    'Authorization':'Bearer ' + auth.token\r\n                }\r\n            });\r\n            const responseData = await response.json();\r\n    \r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n    \r\n            setError(\"Saved successfully\");\r\n        }catch(err){\r\n            console.log(err);\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Posting sub answer\r\n    const postSubAns = async (answerId) => {\r\n        // console.log(subAnswer , answerId);\r\n        const userId = auth.userId;\r\n        try{\r\n            const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/subAnswer/${answerId}/newSubAnswer`,{\r\n                method:'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization':'Bearer ' + auth.token\r\n                },\r\n                body: JSON.stringify({\r\n                    userId:userId,\r\n                    subAnswer:subAnswer\r\n                })\r\n            });\r\n            const responseData = await response.json();\r\n\r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setSubmitAnswer(prevValue => !prevValue);\r\n            // Removing the content from state after sub-answer is posted\r\n            setSubAnswer(null);\r\n        }catch(err){\r\n            console.log(err);\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n\r\n    const log = () => {\r\n        if (editorRef.current) {\r\n            let ans=editorRef.current.getContent();\r\n            ans=ans.split(\">\")[1];\r\n            ans=ans.split(\"<\")[0];\r\n        }\r\n    };\r\n\r\n    ////////////////////////////////////////////// Return section ///////////////////////////////////////////////\r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n\r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            {/* Rendering the component if all the data is received from backend */}\r\n            {!isLoading && question && (\r\n                <React.Fragment>\r\n\r\n                    {/* Showing Delete Section when the button is clicked */}\r\n                    { deleteSection && (\r\n                        <React.Fragment>\r\n                            <Backdrop onClick={errorHandler} />\r\n                            <div className=\"show-delete-section\">\r\n                                <h1>Are You Sure?</h1>\r\n                                <p>Do you want to delete your { deleteSection === \"question\" ? \"question\" : \"answer\" }</p>\r\n                                {/* Checking which is to be deleted question or answer */}\r\n                                <button onClick={deleteSection === \"question\" ? deleteQuestion : deleteAnswer} name={deleteSection}>DELETE</button>\r\n                                <button onClick={cancleShowDeleteSection}>CANCLE</button>\r\n                            </div>\r\n                        </React.Fragment>\r\n                    )}\r\n\r\n                    {/* Showing question's data */}\r\n                    <div className=\"question-container\">\r\n                        \r\n                        {/* Showing the update & delete button of question if the user is authenticated and have asked the question */}\r\n                        { (auth.userId === question.userId) ? (\r\n                            <React.Fragment>\r\n                                <button className=\"btn delete-btn\" style={{float:\"right\"}} name=\"question\" onClick={() => {showDeleteSection('question')}}><i class=\"fas fa-trash-alt\"></i></button>                                       \r\n                                <Link to={`/${quesId}/update`}>\r\n                                    <button className=\"btn update-btn\" style={{float:\"right\"}}><i class=\"fas fa-edit\"></i></button>\r\n                                </Link>\r\n                            </React.Fragment>\r\n                            ): null\r\n                        }\r\n                            \r\n                        <div className=\"user-icon\">\r\n                            { question.userImage ? (\r\n                                <img className=\"users-icon\" src={`${process.env.REACT_APP_ASSET_URL}/${question.userImage}`} alt=\"User\"/>\r\n                                ):(\r\n                                <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                            )}\r\n                        </div>\r\n                        <h6 className=\"student-name\">{question.userName} • just now</h6>\r\n                        <h6 className=\"category\">{question.category}</h6>\r\n                        <h4 className=\"question-title\">{question.title}</h4>\r\n                        {/* Rendering the image if the question contains an image */}\r\n                        { question.image && <img className=\"image-container\" src={`${process.env.REACT_APP_ASSET_URL}/${question.image}`} alt=\"Image\"/>}\r\n                        <p>{question.wholeQuestion}</p>\r\n\r\n                        {/* Give answers options if the user is authenticated */}\r\n                        { auth.isLogedIn ? (\r\n                            <React.Fragment>                            \r\n                                {/* Displaying give answer option to give answer */}\r\n                                <button className=\"btn give-ans-btn\" onClick={() => {showPostSection()}}>\r\n                                    <i class=\"fas fa-comment-medical\"></i> Give Answer\r\n                                </button>        \r\n                            </React.Fragment>\r\n                            ):(\r\n                            <React.Fragment>\r\n                                <a href=\"/authenticate\"><button className=\"btn give-ans-btn\"><i class=\"fas fa-comment-medical\"></i> Give Answer</button></a>\r\n                            </React.Fragment>\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Showing the post answer block */}\r\n                    <div className=\"post-ans-div\">\r\n                        <form onSubmit={nowPostAns}>\r\n\r\n                            {/* If the user wants to upload image in answer */}\r\n                            { showImageUpload && <ImageUpload id='image' onInput={imageInputHandler} center isValid={true}/> }\r\n                            <button id=\"add-image-btn\" style={{margin:\"1% 6%\"}} class=\"btn btn-warning\"onClick={showImageUploadHandler}>Add Image?</button>\r\n                        \r\n                            {/* <textarea className=\"post-ans-text form-control\" rows=\"3\" value={ansGiven} onChange={handleGivenAns} placeholder=\"   Type your answer here...\"/> */}\r\n                            <Editor\r\n                                onInit={(evt, editor) => editorRef.current = editor}\r\n                                initialValue=\"\"\r\n                                init={{\r\n                                height: 500,\r\n                                menubar: false,\r\n                                plugins: [\r\n                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                    'searchreplace visualblocks code fullscreen',\r\n                                    'insertdatetime media table paste code help wordcount'\r\n                                ],\r\n                                toolbar: 'undo redo | formatselect | ' +\r\n                                'bold italic backcolor | alignleft aligncenter ' +\r\n                                'alignright alignjustify | bullist numlist outdent indent | ' +\r\n                                'removeformat | help',\r\n                                content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\r\n                                }}\r\n                            />\r\n\r\n                            <button className=\"btn post-btn\" onClick={submitNewAnswer}><i class=\"fas fa-paper-plane\"></i> Post</button>\r\n                        </form>\r\n                    </div>\r\n                        \r\n                    { answers && (\r\n                        <React.Fragment>\r\n                            <h6 className=\"answers-heading\">Answers</h6>\r\n                            <hr/>\r\n                        </React.Fragment>\r\n                    )}\r\n\r\n                    {/* Showing all the answers of that question */}\r\n                    {answers && (\r\n                        <div className=\"answers-div\" >\r\n                            {\r\n                                answers.map((ans,index) => {\r\n                                    if(!showAllAnswers && index<3){\r\n                                        return (\r\n                                            <React.Fragment>\r\n                                                <div className=\"answer-container\">\r\n                                                \r\n                                                    {/* Showing the update & delete button of answer if the user have given that answer */}\r\n                                                    { auth.userId === ans.userId ? (\r\n                                                        <React.Fragment>\r\n                                                            <button className=\"btn delete-btn\" style={{float:\"right\"}} name={ans.id} onClick={() => {showDeleteSection(ans.id)}}>\r\n                                                                <i class=\"fas fa-trash-alt\"></i>\r\n                                                            </button>\r\n                                                            <Link to={`/update/${ans.id}`}>\r\n                                                                <button className=\"btn update-btn\" style={{float:\"right\"}}>\r\n                                                                    <i class=\"fas fa-edit\"></i>\r\n                                                                </button>\r\n                                                            </Link>\r\n                                                        </React.Fragment>\r\n                                                        ):null\r\n                                                    }\r\n\r\n                                                    {/* Showing the rating button to all the users who have not given this answer */}\r\n                                                    { auth.isLogedIn ? (\r\n                                                        auth.userId !== ans.userId ? (\r\n                                                            <button className=\"btn rate-btn\" disabled={stopIncerement} onClick={() => {incrementRating(ans.id)}} style={{float:\"right\"}}>\r\n                                                                <img className=\"rate-img\" src={rate}></img>\r\n                                                            </button>\r\n                                                            ):null\r\n                                                        ):(\r\n                                                        <a href=\"/authenticate\">\r\n                                                            <button className=\"btn rate-btn\" disabled={stopIncerement} onClick={() => {incrementRating(ans.id)}} style={{float:\"right\"}}>\r\n                                                                <img className=\"rate-img\" src={rate}></img>\r\n                                                            </button>\r\n                                                        </a> \r\n                                                        )\r\n                                                    }\r\n                                            \r\n                                                    {/* Answer's content */}\r\n                                                    <div className=\"user-icon\">\r\n                                                        {ans.userImage ? (\r\n                                                                <div clssName=\"item__image\">\r\n                                                                    <img className=\"users-icon\" src={`${process.env.REACT_APP_ASSET_URL}/${ans.userImage}`} alt=\"User\"/>\r\n                                                                </div>\r\n                                                            ):(\r\n                                                                <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                                                        )}\r\n                                                    </div>\r\n                                                    <h6 className=\"student-name\">{ans.userName} • just now</h6>\r\n                                                    <h6 className=\"category\">{ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>\r\n                                                    { ans.image && (\r\n                                                        <div clssName=\"item__image\">\r\n                                                            <img className=\"image-container\" src={`${process.env.REACT_APP_ASSET_URL}/${ans.image}`} alt=\"Image\"/>\r\n                                                        </div>\r\n                                                    )}                                                                 \r\n                                                    <p className=\"answers\">{ans.answer}</p>\r\n                                                    \r\n\r\n                                                    {( auth.isLogedIn && ans.subAnswers.length !== 0) ? (\r\n                                                        ans.subAnswers.map((subAns) => {\r\n                                                            return(\r\n                                                                <React.Fragment>\r\n                                                                    \r\n                                                                    <div className=\"sub-ANS\"> \r\n                                                                        <div className=\"user-icon\">\r\n                                                                            {subAns.userImage ? (\r\n                                                                                    <div clssName=\"item__image\">\r\n                                                                                        <img className=\"users-icon\" src={`${process.env.REACT_APP_ASSET_URL}/${subAns.userImage}`} alt=\"User\"/>\r\n                                                                                    </div>\r\n                                                                                ):(\r\n                                                                                    <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                        <h6 className=\"student-name\">{subAns.userName} • just now</h6>\r\n                                                                        <h6 className=\"category\">{ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>\r\n                                                                        <p className=\"answers\">{subAns.subAnswer}</p>\r\n                                                                    </div>\r\n\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                        })\r\n                                                        ):null\r\n                                                    }\r\n                                                            \r\n                                                    {/* To save the answer in users database */}\r\n                                                    { auth.isLogedIn && ((auth.userId !== ans.userId) && (\r\n                                                        <button className=\"btn save-btn\" onClick={() => {saveAnswer(ans.id)}}>\r\n                                                            <i class=\"fas fa-bookmark\"></i>\r\n                                                        </button>\r\n                                                    ))}\r\n\r\n                                                    { auth.isLogedIn && (\r\n                                                        <button className=\"btn post-subAns-btn\" style={{float:\"left\"}} onClick={() => {showSubAnswerDiv(ans.id)}}>\r\n                                                            REPLY\r\n                                                        </button>\r\n                                                    )}\r\n\r\n                                                    {/* Showing the post sub-answer block */}\r\n                                                    <div className={`sub-ans-div ans-${ans.id}`}>\r\n                                                        <form onSubmit={(event) => {\r\n                                                            event.preventDefault();\r\n                                                            postSubAns(ans.id);\r\n                                                        }}>\r\n                                                            <textarea className=\"post-ans-text form-control\" id=\"txtarea\" rows=\"3\" value={subAnswer} onChange={handleSubAnswer} placeholder=\"Write your query here ..\"/>                                                    \r\n                                                            <button className=\"btn post-btn\">\r\n                                                                <i class=\"fas fa-paper-plane\"></i> Post\r\n                                                            </button>\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                    }\r\n                                    else if(showAllAnswers){\r\n                                        return (\r\n                                            <React.Fragment>\r\n                                                <div className=\"answer-container\">\r\n                                                    {/* Showing the update & delete button if the user have given the answer */}\r\n                                                    { auth.userId === ans.userId ? (\r\n                                                        <React.Fragment>\r\n                                                            <button className=\"btn delete-btn\" style={{float:\"right\"}} name={ans.id} onClick={() => {showDeleteSection(ans.id)}}><i class=\"fas fa-trash-alt\"></i></button>\r\n                                                            <Link to={`/update/${ans.id}`}>\r\n                                                                <button className=\"btn update-btn\" style={{float:\"right\"}}><i class=\"fas fa-edit\"></i></button>\r\n                                                            </Link>\r\n                                                        </React.Fragment>\r\n                                                        ):null\r\n                                                    }\r\n\r\n                                                    {/* Showing the rating button to all the users who have not given this answer */}\r\n                                                    { auth.isLogedIn ? (\r\n                                                        auth.userId !== ans.userId ? (\r\n                                                            <button className=\"btn rate-btn\" disabled={stopIncerement} onClick={() => {incrementRating(ans.id)}} style={{float:\"right\"}}><img className=\"rate-img\" src={rate}></img></button>\r\n                                                            ):null\r\n                                                        ):(\r\n                                                        <a href=\"/authenticate\">\r\n                                                            <button className=\"btn rate-btn\" disabled={stopIncerement} onClick={() => {incrementRating(ans.id)}} style={{float:\"right\"}}>\r\n                                                                <img className=\"rate-img\" src={rate}></img>\r\n                                                            </button>\r\n                                                        </a> \r\n                                                        )\r\n                                                    }\r\n                                            \r\n                                                    <div className=\"user-icon\">\r\n                                                        {ans.userImage ? (\r\n                                                                <div className=\"item__image\">\r\n                                                                    <img className=\"users-icon\" src={`${process.env.REACT_APP_ASSET_URL}/${ans.userImage}`} alt=\"User\"/>\r\n                                                                </div>\r\n                                                            ):(\r\n                                                                <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                                                        )}\r\n                                                    </div>\r\n                                                    <h6 className=\"student-name\">{ans.userName} • just now</h6>\r\n                                                    <h6 className=\"category\">{ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>                                                                                    \r\n                                                    { ans.image && (\r\n                                                        <div clssName=\"item__image\">\r\n                                                            <img className=\"image-container\" src={`${process.env.REACT_APP_ASSET_URL}/${ans.image}`} alt=\"Image\"/>\r\n                                                        </div>\r\n                                                    )}\r\n                                                    <p className=\"answers\">{ans.answer}</p>\r\n                                                    \r\n\r\n                                                    {( auth.isLogedIn && ans.subAnswers.length !== 0) ? (\r\n                                                        ans.subAnswers.map((subAns) => {\r\n                                                            return(\r\n                                                                <React.Fragment>\r\n                                                                    <div className=\"sub-ANS\">\r\n                                                                        <div className=\"user-icon\">\r\n                                                                            {subAns.userImage ? (\r\n                                                                                    <div className=\"item__image\">\r\n                                                                                        <img className=\"users-icon\" src={`${process.env.REACT_APP_ASSET_URL}/${subAns.userImage}`} alt=\"User\"/>\r\n                                                                                    </div>\r\n                                                                                ):(\r\n                                                                                    <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                        <h6 className=\"student-name\">{subAns.userName} • just now</h6>\r\n                                                                        <h6 className=\"category\">{ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>\r\n                                                                        <p className=\"answers\">{subAns.subAnswer}</p>\r\n                                                                    </div>\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                        })\r\n                                                        ):null\r\n                                                    }\r\n\r\n                                                    {/* To save the answer in users database */}\r\n                                                    { auth.isLogedIn && ((auth.userId !== ans.userId) && (\r\n                                                        <button className=\"btn save-btn\" onClick={() => {saveAnswer(ans.id)}}><i class=\"fas fa-bookmark\"></i></button>\r\n                                                    ))}\r\n\r\n                                                    { auth.isLogedIn && (\r\n                                                        <button className=\"btn post-subAns-btn\" style={{float:\"left\"}} onClick={() => {showSubAnswerDiv(ans.id)}}>\r\n                                                            REPLY\r\n                                                        </button>\r\n                                                    )}\r\n\r\n                                                    {/* Showing the post answer block */}\r\n                                                    <div className={`sub-ans-div ans-${ans.id}`}>\r\n                                                        <form onSubmit={(event) => {\r\n                                                            event.preventDefault();\r\n                                                            postSubAns(ans.id);\r\n                                                        }}>\r\n                                                            <textarea className=\"post-ans-text flow-control\" rows=\"3\" value={subAnswer} onChange={handleSubAnswer} placeholder=\"     Write your query here ..\"/>\r\n                                                            <button className=\"btn post-btn\"><i class=\"fas fa-paper-plane\"></i> Post</button>\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                    }   \r\n                                })\r\n                            }\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Show more options if the user is authenticated */}\r\n                    { auth.isLogedIn ? (\r\n                        <React.Fragment>\r\n                            {/* If there are more then 3 answers then displaying show more option */}\r\n                            {answers && ((answers.length>3) ? (\r\n                                <button className=\"btn show-more-btn\" onClick={handleShowAllAnswers}>\r\n                                    <i class=\"fas fa-caret-square-down\"></i> Show More\r\n                                </button>\r\n                            ):null)}                               \r\n                        </React.Fragment>\r\n                        ):(\r\n                        <React.Fragment>\r\n                            {/* This will redirect the users to authentication page because they are not logged in */}\r\n                            {answers && ((answers.length>3) ? (\r\n                                <a href=\"/authenticate\"><button className=\"show-more-btn\"><img className=\"show-more-img\" src={showmore}></img>Show more</button></a>\r\n                            ):null)}\r\n                        </React.Fragment>\r\n                        )\r\n                    }\r\n\r\n                </React.Fragment>    \r\n            )}\r\n                \r\n        </React.Fragment>   \r\n    );\r\n}\r\n\r\nexport default QuesPage;\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/post.a8847852.svg\";","import React,{useEffect,useState} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport QuesList from '../components/QuesList';\nimport Categories from '../components/Categories';\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst CatQuestions = ( ) =>  {\n\n    // Taking the category name from the route\n    const category = useParams().catID;\n\n    // State for storing all the questions of the given category\n    const [categoryQuestions , setCategoryQuestions] = useState();\n\n    // State for Loading spinner & Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    // This request will be sended every time when the category is changed in route\n    useEffect(() => {\n\n        // Sending the get request\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/question/category/${category}`);\n                const responseData = await response.json();\n\n                // Throwing error comming from backend\n                if(responseData.message && responseData.message !== \"No questions of mentioned category\"){\n                    throw new Error(responseData.message);\n                }\n\n                // Storing the category questions in our State\n                setCategoryQuestions(responseData.questions);\n            }catch(err){\n                console.log(err);\n                // Setting the error in frontend\n                setError(err.message);\n            }\n            // Turning off the loading spinner after the data is received\n            setIsLoading(false);\n        }\n\n        // Calling our function\n        sendRequest();\n    },[category]);\n    \n    return(\n        <React.Fragment>\n\n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            {/* Showing the categories and question after the data is received from backend */}\n            { !isLoading && (\n                <div className=\"home\">\n                    <div className=\"left\">\n                        <Categories />\n                    </div>\n                    <div className=\"right\">\n                        { categoryQuestions && <QuesList allQuestions={categoryQuestions} /> }\n                        { !categoryQuestions && <h1>No questios of this category available</h1>}\n                    </div>\n                </div>\n            )}\n            \n        </React.Fragment>\n    );\n}\n\nexport default CatQuestions;","import React, { useEffect, useState , useContext } from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport \"./UserQuestions.css\";\nimport QuesList from '../components/QuesList';\nimport Categories from '../components/Categories';\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {AuthContext} from \"../../shared/context/AuthContext\";\n\nconst UserQuestions = () => {\n\n    const userId = useParams().userId;\n\n    const auth = useContext(AuthContext);\n\n    // State for storing all the questions of the given category\n    const [userQuestions , setUserQuestions] = useState();\n\n    // State for Loading spinner & Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    // Sending the get request\n    useEffect(() => {\n\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n                const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/user/${userId}/questions`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n\n                // Throwing error comming from backend\n                if(responseData.message && responseData.message !== \"No questions found\"){\n                    throw new Error(responseData.message);\n                }\n\n                // Storing the user questions in our State\n                setUserQuestions(responseData.questions);\n            }catch(err){\n                console.log(err);\n                // Setting the error in frontend\n                setError(err.message);\n            }\n            // Turning off the loading spinner after the data is received\n            setIsLoading(false);\n        }\n        sendRequest();\n    } , []);    \n\n    return(\n        <React.Fragment>\n            \n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            {/* Showing the user questions after the data is received from backend */}\n            { !isLoading && (\n                <div className=\"home\">\n                    <div className=\"left\">\n                        <Categories />\n                    </div>\n                    <div className=\"right\">\n                        { userQuestions && <QuesList allQuestions={userQuestions} /> }\n                        { !userQuestions && <h1 style={{color:\"white\"}}><i style={{color:\"#ffc107\"}} class=\"fas fa-exclamation-triangle\"></i> No questios of this category available</h1>}\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n}\n\nexport default UserQuestions;","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};","import React,{useContext,useState,useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport \"./NewQuestion.css\";\r\nimport Input from '../../shared/components/Input';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/ImageUpload\";\r\n\r\nconst NewQuestion = () => {\r\n\r\n    // For getting userId from AuthContext\r\n    const auth = useContext(AuthContext);\r\n\r\n    // For redirecting the user to \"/\" route after clicking submit button\r\n    const history = useHistory();\r\n\r\n    // For showing errors in frontend\r\n    const [error,setError] = useState();\r\n    const [isLoading , setIsLoading] = useState(false);\r\n\r\n    // For displaying the user's name\r\n    const [userName , setUserName] = useState();\r\n\r\n    // This state will decided to show the image section or not \r\n    const [showImageUpload , setShowImageUpload] = useState(false);\r\n\r\n    // The form should only be submitted when the SUBMIT button is clicked\r\n    const [onSubmit , setOnSubmit] = useState(false);\r\n\r\n    // Form input State\r\n    const [formState, handleInput] = useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            image:{ \r\n                value:null,\r\n                isValid:true\r\n            }\r\n        },\r\n        false\r\n    )\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                setIsLoading(true);\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/user/${auth.userId}`,{\r\n                    headers:{\r\n                        'Authorization':'Bearer ' + auth.token\r\n                    }\r\n                });\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setUserName(responseData.user.name);\r\n            }catch(err){\r\n                console.log(err);\r\n                setError(err);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        sendRequest();\r\n    },[])\r\n    \r\n    // This will be triggered when user will click submit button \r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if(onSubmit){\r\n            // Sending the POST request to create new Question\r\n            try{\r\n\r\n                const formData = new FormData();\r\n                formData.append('userId',auth.userId);\r\n                formData.append('title',formState.inputs.title.value);\r\n                formData.append('category',formState.inputs.category.value);\r\n                formData.append('wholeQuestion',formState.inputs.wholeQuestion.value);\r\n                formData.append('image',formState.inputs.image.value);\r\n\r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + \"/question/\",{\r\n                    method:'POST',\r\n                    headers:{\r\n                        'Authorization':'Bearer ' + auth.token\r\n                    },\r\n                    body: formData\r\n                });\r\n\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                // After creating the new question, redirect the user to home page(\"/\")\r\n                history.push(\"/\");\r\n            }catch(err){\r\n                console.log(err);\r\n                // Setting the error\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    const showImageUploadHandler = (event) => {\r\n        event.preventDefault();\r\n        setShowImageUpload(true);\r\n        const btn = document.querySelector('#add-image-btn');\r\n        btn.style.display = 'none';\r\n    }\r\n\r\n    // Will bw triggered when the submit button is clicked\r\n    const submitButtonHandler = (event) => {\r\n        event.preventDefault();\r\n        setOnSubmit(true);\r\n        submitHandler(event);\r\n    }\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                    <React.Fragment>\r\n                        <Backdrop onClick={errorHandler} />\r\n                        <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                    </React.Fragment>\r\n            )}\r\n\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && userName && (\r\n                <form>\r\n\r\n                    {/* Input for title of question */}                \r\n                    <div className=\"ask-question-container\">                                \r\n                        <div className=\"user-icon\"><AccountCircleIcon className=\"user-icon\" style={{fontSize:\"3.3rem\"}}/></div>\r\n                        <h6 className=\"student-name\">{userName} <i style={{color:\"gray\"}}>asked</i></h6>\r\n                        <Input \r\n                            id=\"title\"\r\n                            element=\"textarea\"\r\n                            placeholder=\"Add description of your question here\"                        \r\n                            errorMessage = \"Please enter a valid title\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                            className=\"form-control que-title-text\" \r\n                            rows=\"2\"        \r\n                        />\r\n                    </div>\r\n\r\n                    {/* Input for category of question*/}\r\n                    <div className=\"ask-question-container\">                                \r\n                        <h6>Add Category</h6>    \r\n                        <Input \r\n                            id=\"category\"\r\n                            element=\"input\"\r\n                            type=\"text\"\r\n                            label=\"Category\"\r\n                            placeholder=\"Arduino\"\r\n                            className=\"form-control cat\"\r\n                            errorMessage=\"Please enter a category\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* If the user wants to upload image in question */}\r\n                    { showImageUpload && <ImageUpload id='image' onInput={handleInput} center isValid={true}/> }\r\n                    <button id=\"add-image-btn\" class=\"add-image-btn btn btn-warning\" onClick={showImageUploadHandler}>Add Image?</button>\r\n\r\n                    {/* Input for wholeQuestion of question */}\r\n                    <div className=\"que-body-container\">\r\n                        <Input  \r\n                            id=\"wholeQuestion\"\r\n                            element=\"textarea\"\r\n                            errorMessage=\"Question must be of 10 Characters\"\r\n                            validators={[VALIDATOR_MINLENGTH(10)]}\r\n                            onInput={handleInput}\r\n                            className=\"form-control que-body-text\" \r\n                            rows=\"7\"\r\n                            placeholder=\"Add description of your question here...\"\r\n                        />\r\n                        \r\n                    </div>\r\n\r\n                    {/* This button will be disabled if the formState is invalid */}\r\n                    <div className=\"submit-btn-div\">\r\n                        <button className=\"btn ask-submit-btn\" disabled={!formState.isValid} onClick={submitButtonHandler}> \r\n                            <i class=\"fas fa-check-circle\"></i> Submit\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default NewQuestion;","import React,{useState, useEffect, useContext} from 'react';\nimport {useParams, useHistory} from 'react-router-dom';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nimport \"./UpdateQues.css\";\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\nimport Input from \"../../shared/components/Input\";\nimport {useForm} from \"../../shared/hoocks/form-hook\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {AuthContext} from \"../../shared/context/AuthContext\";\n\nconst UpdateQues = (props) => {\n\n    // Using useHistory hook to go to the question page after updation\n    const history = useHistory();\n\n    // For components which shoul be rendered when the user is authenticated\n    const auth = useContext(AuthContext);\n\n    // Taking quesId from the route\n    const quesId = useParams().quesId;\n\n    // State for Loading Spinner and Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    const [userName , setUserName] = useState();\n\n    // Form State initially it is empty because we have not sended the get request to backend\n    const [formState, handleInput, setFormData] =  useForm(\n        {\n            category:{\n                value:'',\n                isValid:false,\n            },\n            title:{\n                value:'',\n                isValid:false\n            },\n            wholeQuestion:{\n                value:'',\n                isValid:false,\n            }\n        },\n        false\n    );\n\n    // Sending the fetcg get request to get the data of the question\n    useEffect(() => {\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n\n                // Sending get request for question\n                const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/question/${quesId}`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n                if(responseData.message){\n                    throw new Error(responseData.message);\n                }\n\n                setUserName(responseData.question.userName);\n\n                // After getting the question data we have to update our formState\n                setFormData(\n                    {\n                        category:{\n                            value:responseData.question.category,\n                            isValid:true,\n                        },\n                        title:{\n                            value:responseData.question.title,\n                            isValid:true\n                        },\n                        wholeQuestion:{\n                            value:responseData.question.wholeQuestion,\n                            isValid:true,\n                        }\n                    },\n                    true\n                )\n            }catch(err){\n                console.log(err);\n                // Setting the error comming from backend\n                setError(err.message);\n            }\n\n            // Turning off the loading spinner\n            setIsLoading(false);\n        }\n        // Calling our function\n        sendRequest();\n    },[]);\n\n    // Function to handle submit\n    const submitHandler = async (event) => {\n\n        // Preventing the default after clicking the button\n        event.preventDefault();\n\n        // Sending the Patch request with old question details to update the question \n        try{\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/question/${quesId}`,{\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization':'Bearer ' + auth.token\n                },\n                body: JSON.stringify({\n                    title:formState.inputs.title.value,\n                    category:formState.inputs.category.value,\n                    wholeQuestion:formState.inputs.wholeQuestion.value\n                })\n            });\n            const responseData = await response.json();\n\n            // Sending the error if it is comming from backend\n            if(responseData.message){\n                throw new Error(responseData.message);\n            }\n\n            // After updation we should redirect to question(QuesPage component) page\n            history.push(`/ques/${quesId}`);\n        }catch(err){\n            console.log(err);\n            // Setting the errors to show in frontend\n            setError(err.message);\n        }\n    }\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    return(\n        <React.Fragment>\n\n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { !isLoading && userName && (\n                <form onSubmit={submitHandler}>\n\n                    {/* Input for title of question */}                \n                    <div className=\"ask-question-container\">                                \n                        <div className=\"user-icon\"><AccountCircleIcon className=\"user-icon\" style={{fontSize:\"3.3rem\"}}/></div>\n                        <h6 className=\"student-name\">{userName} • asked</h6>\n                        <Input \n                            id=\"title\"\n                            element=\"textarea\"\n                            value={formState.inputs.title.value}\n                            isValid={formState.inputs.title.isValid}\n                            isTouch={true}\n                            errorMessage = \"Please enter a valid title\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            onInput={handleInput}\n                            className=\"que-title-text\" \n                            rows=\"2\"\n                        />\n                    </div>\n\n                    {/* Input for category of question*/}\n                    <div className=\"ask-question-container\">                                \n                        <h6>Add Category</h6>    \n                        <Input \n                            id=\"category\"\n                            element=\"input\"\n                            type=\"text\"\n                            label=\"Category\"\n                            value={formState.inputs.category.value}\n                            isValid={formState.inputs.category.isValid}\n                            isTouch={true}\n                            errorMessage=\"Please enter a category\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            onInput={handleInput}\n                            className=\"cat\"\n                        />\n                    </div>\n\n                    {/* Input for wholeQuestion of question */}\n                    <div className=\"que-body-container\">\n                        <Input  \n                            id=\"wholeQuestion\"\n                            element=\"textarea\"\n                            value={formState.inputs.wholeQuestion.value}\n                            isValid={formState.inputs.wholeQuestion.isValid}\n                            isTouch={true}\n                            errorMessage=\"Question must be of 10 Characters\"\n                            validators={[VALIDATOR_MINLENGTH(10)]}\n                            onInput={handleInput}\n                            className=\"que-body-text\" \n                            rows=\"7\"\n                        />\n                    </div>\n\n                    {/* This button should be disabled if the form in invalid */}\n                    <button className=\"submit-btn\" disabled={!formState.isValid}>\n                        Submit\n                    </button>\n                </form>\n            )}\n            \n        </React.Fragment>\n    )\n}\n\nexport default UpdateQues;","import React,{useState, useEffect, useContext} from 'react';\nimport {useParams, useHistory} from 'react-router-dom';\n\nimport \"./UpdateAnswer.css\";\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\nimport Input from \"../../shared/components/Input\";\nimport {useForm} from \"../../shared/hoocks/form-hook\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {AuthContext} from \"../../shared/context/AuthContext\";\n\nconst UpdateAnswer = (props) => {\n\n    // Using useHistory hook to go to the question page after updation\n    const history = useHistory();\n\n    // For components which shoul be rendered when the user is authenticated\n    const auth = useContext(AuthContext);\n\n    // Taking answerId from the route\n    const answerId = useParams().answerId;\n\n    // State for Loading Spinner and Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    // Form State initially it is empty because we have not sended the get request to backend\n    const [formState, handleInput, setFormData] =  useForm(\n        {\n            answer:{\n                value:'',\n                isValid:false,\n            }\n        },\n        false\n    );\n\n    // Sending the fetch get request to get the data of the answer\n    useEffect(() => {\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n\n                // Sending get request for answer data\n                const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/answer/getAnswer/${answerId}`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n                if(responseData.message){\n                    throw new Error(responseData.message);\n                }\n\n                // After getting the answer data we have to update our formState\n                setFormData(\n                    {\n                        answer:{\n                            value:responseData.answer.answer,\n                            isValid:true,\n                        }\n                    },\n                    true\n                )\n            }catch(err){\n                console.log(err);\n                // Setting the error comming from backend\n                setError(err.message);\n            }\n\n            // Turning off the loading spinner\n            setIsLoading(false);\n        }\n        // Calling our function\n        sendRequest();\n    },[]);\n\n    // Function to handle submit\n    const submitHandler = async (event) => {\n\n        // Preventing the default after clicking the button\n        event.preventDefault();\n     \n        // Sending the Patch request with old answer details to update the answer \n        try{\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/answer/${answerId}`,{\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization':'Bearer ' + auth.token\n                },\n                body: JSON.stringify({\n                    answer:formState.inputs.answer.value\n                })\n            });\n            const responseData = await response.json();\n\n            // Sending the error if it is comming from backend\n            if(responseData.message){\n                throw new Error(responseData.message);\n            }\n\n            // After updation we should redirect to question(QuesPage component) page\n            history.push(`/ques/${responseData.answer.questionId}`);\n        }catch(err){\n            console.log(err);\n            // Setting the errors to show in frontend\n            setError(err.message);\n        }\n    }\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    return(\n        <React.Fragment>\n\n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { !isLoading && (\n                <form onSubmit={submitHandler}>\n                    {/* Taking answer as input */}\n                    <p className=\"U-ans-heading\">Your Answer</p>\n                    <div className=\"U-ans-text\">\n                        <Input \n                            id=\"answer\"\n                            element=\"textarea\"\n                            type=\"text\"\n                            className=\" post-ans-text form-control U-ans-text\"\n                            rows=\"5\"\n                            value={formState.inputs.answer.value}\n                            isValid={formState.inputs.answer.isValid}\n                            isTouch={true}\n                            errorMessage=\"Please write your answer.\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            onInput={handleInput}\n                        />\n                    </div>\n                    \n                    {/* This button should be disabled if the form in invalid */}\n                    <button disabled={!formState.isValid} className=\"btn btn-outline-danger submit-btn\"><i class=\"fas fa-check-circle\"></i> Submit</button>\n                </form>\n            )}\n            \n        </React.Fragment>\n    )\n}\n\nexport default UpdateAnswer;","import React, { useEffect, useState, useContext } from 'react';\nimport {useParams,Link} from 'react-router-dom';\n\nimport \"./UserAnswers.css\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Categories from '../components/Categories';\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport ratings from '../../photos/ratings.svg';\nimport {AuthContext} from \"../../shared/context/AuthContext\";\n\nconst UserAnswers = () => {\n\n    // Getting userId from the route\n    const userId = useParams().userId;\n\n    // For components which shoul be rendered when the user is authenticated\n    const auth = useContext(AuthContext);\n\n    // State for storing all the answers and respective question\n    const [quesAns , setQuesAns] = useState();\n\n    // State for Loading spinner & Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    // Sending the get request\n    useEffect(() => {\n\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n                const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/user/${userId}/answers`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n\n                // Throwing error comming from backend\n                if(responseData.message && responseData.message !== \"No answers are given by user\"){\n                    throw new Error(responseData.message);\n                }\n\n                // Storing the user question and asnwers in our State\n                setQuesAns(responseData.quesAns);\n            }catch(err){\n                console.log(err);\n                // Setting the error in frontend\n                setError(err.message);\n            }\n            // Turning off the loading spinner after the data is received\n            setIsLoading(false);\n        }\n        sendRequest();\n    } , []);    \n\n    return(\n        <React.Fragment>\n            \n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            {/* Showing the user answers with respective questions after the data is received from backend */}\n            { !isLoading && (\n                <div className=\"home\">\n                    <div className=\"left\">\n                        <Categories />\n                    </div>\n                    <div className=\"right\">\n                        { quesAns && (\n                            quesAns.map(qa => {\n                                return(\n                                    <div className=\"container\">\n                                        { qa.userImage ? (\n                                            <img className=\"user-icon\" style={{height:\"2.8rem\"}} src={`${process.env.REACT_APP_ASSET_URL}/${qa.userImage}`} alt=\"User\"/>\n                                        ):(\n                                            <div className=\"user-icon\"><AccountCircleIcon style={{fontSize:\"3.3rem\"}}/></div>\n                                        )}\n                                        <h6 className=\"student-name\">{qa.question.userName} • just now</h6>\n                                        <Link style={{textDecoration:\"none\"}} to={`/ques/${qa.question._id}`}>\n                                            <h4 className=\"question-title\">{qa.question.title}</h4>\n                                        </Link>\n                                        <div className=\"answer-container-save\">\n                                            { qa.userImage ? (\n                                                <img className=\"user-icon\" style={{height:\"2.8rem\"}} src={`${process.env.REACT_APP_ASSET_URL}/${qa.userImage}`} alt=\"User\"/>\n                                            ):(\n                                                <div className=\"user-icon\"><AccountCircleIcon style={{fontSize:\"3.3rem\"}}/></div>\n                                            )}\n                                            <h6 className=\"student-name\" >{qa.ans.userName}<p className=\"student-tag\">'s answer</p></h6>   \n                                            <h6 className=\"category\">{qa.ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>                                                                 \n                                            \n                                            <p className=\"answers\">{qa.ans.answer}</p>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        )}\n                        { !quesAns && <h1>No answers are given by user</h1>}\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n}\n\nexport default UserAnswers;","import React, { useEffect, useState, useContext } from 'react';\nimport {useParams,Link} from 'react-router-dom';\n\nimport \"./SavedAnswers.css\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Categories from '../components/Categories';\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport ratings from '../../photos/ratings.svg';\nimport {AuthContext} from \"../../shared/context/AuthContext\";\n\nconst SavedAnswers = () => {\n\n    // Getting userId from the route\n    const userId = useParams().userId;\n\n    // For components which shoul be rendered when the user is authenticated\n    const auth = useContext(AuthContext);\n\n    // State for storing all the answers and respective question\n    const [quesAns , setQuesAns] = useState();\n\n    // State for Loading spinner & Error model\n    const [isLoading , setIsLoading] = useState(false);\n    const [error , setError] = useState();\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    // Sending the get request\n    useEffect(() => {\n\n        const sendRequest = async () => {\n            try{\n                // Turning on the loading spinner\n                setIsLoading(true);\n                const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/user/${auth.userId}/savedAnswers`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n\n                // Throwing error comming from backend\n                if(responseData.message && responseData.message !== \"No answers were saved by the user.\"){\n                    throw new Error(responseData.message);\n                }\n\n                // Storing the user question and asnwers in our State\n                setQuesAns(responseData.quesAns);\n            }catch(err){\n                console.log(err);\n                // Setting the error in frontend\n                setError(err.message);\n            }\n            // Turning off the loading spinner after the data is received\n            setIsLoading(false);\n        }\n        sendRequest();\n    } , []);    \n\n    return(\n        <React.Fragment>\n            \n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n\n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            {/* Showing the user answers with respective questions after the data is received from backend */}\n            { !isLoading && (\n                <div className=\"home\">\n                    <div className=\"left\">\n                        <Categories />\n                    </div>\n                    <div className=\"right\">\n                        { quesAns && (\n                            quesAns.map(qa => {\n                                return(\n                                    <div className=\"container\">\n                                        { qa.userImage ? (\n                                            <img className=\"user-icon\" style={{height:\"2.8rem\"}} src={`${process.env.REACT_APP_ASSET_URL}/${qa.userImage}`} alt=\"User\"/>\n                                        ):(\n                                            <div className=\"user-icon\"><AccountCircleIcon style={{fontSize:\"3.3rem\"}}/></div>\n                                        )}\n                                        <h6 className=\"student-name\">{qa.question.userName} • just now</h6>\n                                        <Link style={{textDecoration:\"none\"}} to={`/ques/${qa.question._id}`}>\n                                            <h4 className=\"question-title\">{qa.question.title}</h4>\n                                        </Link>\n                                        <div className=\"answer-container-save\">\n                                            { qa.userImage ? (\n                                                <img className=\"user-icon\" style={{height:\"2.8rem\"}} src={`${process.env.REACT_APP_ASSET_URL}/${qa.userImage}`} alt=\"User\"/>\n                                            ):(\n                                                <div className=\"user-icon\"><AccountCircleIcon style={{fontSize:\"3.3rem\"}}/></div>\n                                            )}\n                                            <h6 className=\"student-name\" >{qa.ans.userName}<p className=\"student-tag\">'s answer</p></h6>   \n                                            <h6 className=\"category\">{qa.ans.rating}<img className=\"ratings-img\" src={ratings}></img></h6>                                                                 \n                                            \n                                            <p className=\"answers\">{qa.ans.answer}</p>\n                                        </div>\n                                    </div>                             \n                                )\n                            })\n                        )}\n                        { !quesAns && <h1>No answers were saved by the user.</h1>}\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n}\n\nexport default SavedAnswers;","import React,{useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport M from 'materialize-css';\n\nconst Reset  = ()=>{\n    const history = useHistory()\n    const [email,setEmail] = useState(\"\")\n    const PostData = ()=>{\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\n            M.toast({html: \"invalid email\",classes:\"#c62828 red darken-3\"})\n            return\n        }\n        fetch('${process.env.REACT_APP_BACKEND_URL}/user/reset-password',{\n            method:\"post\",\n            headers:{\n                \"Content-Type\":\"application/json\"\n            },\n            body:JSON.stringify({\n                email\n            })\n        }).then(res=>res.json())\n            .then(data=>{\n                if(data.error){\n                    M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n                }\n                else{\n                    M.toast({html:data.message,classes:\"#43a047 green darken-1\"})\n                    history.push('/authenticate')\n                }\n            }).catch(err=>{\n            console.log(err)\n        })\n    }\n    return (\n        <div>\n            <div className=\"card auth-card input-field\"\n            color={\"black\"}>\n                <h2>Password Reset</h2>\n                <input\n                    type=\"text\"\n                    style={{\n                        color: \"black\"\n                    }}\n                    placeholder=\"email\"\n                    value={email}\n                    onChange={(e)=>setEmail(e.target.value)}\n                />\n                <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\n                        onClick={()=>PostData()}\n                >\n                    reset password\n                </button>\n\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default Reset","import React,{useState,useContext,} from 'react'\nimport {Link,useHistory,useParams} from 'react-router-dom'\nimport M from 'materialize-css'\nconst NewPassword  = ()=>{\n    const history = useHistory()\n    const [password,setPassword] = useState(\"\")\n    const {token} = useParams()\n    console.log(token)\n    const PostData = ()=>{\n        fetch(\"${process.env.REACT_APP_BACKEND_URL}/user/new-password\",{\n            method:\"post\",\n            headers:{\n                \"Content-Type\":\"application/json\"\n            },\n            body:JSON.stringify({\n                password,\n                token\n            })\n        }).then(res=>res.json())\n            .then(data=>{\n                console.log(data)\n                if(data.error){\n                    M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n                }\n                else{\n\n                    M.toast({html:data.message,classes:\"#43a047 green darken-1\"})\n                    history.push('/authenticate')\n                }\n            }).catch(err=>{\n            console.log(err)\n        })\n    }\n    return (\n        <div>\n            <div>\n                <h2>New Password</h2>\n\n                <input\n                    type=\"password\"\n                    style={{\n                        color: \"black\"\n                    }}\n                    placeholder=\"enter a new password\"\n                    value={password}\n                    onChange={(e)=>setPassword(e.target.value)}\n                />\n                <button\n                        onClick={()=>PostData()}\n                >\n                    Update password\n                </button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default NewPassword;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport \"./Course.css\";\nimport ratings from '../../photos/ratings.svg';\n\nconst Course = (props) => {\n    return(\n        <React.Fragment>\n            <div className='course-container shadows'>                \n                <h3 className=\"course-name\">{props.name}</h3>\n                <p>{props.description[0].para}</p>\n                <h6 className=\"rating\">{props.rating}<img className=\"ratings-img\" src={ratings}></img></h6>\n                <p className=\"prices\">₹ {props.price}</p>\n\n                { props.lastSeenSectionId ? (\n                    <Link to={`/subTopic/${props.lastSeenSectionId}`} style={{textDecoration:\"none\"}}>\n                        <button id=\"testbutton\" className=\"btn\"></button>\n                    </Link>\n                ): (\n                    <Link to={`/course/${props.id}`} style={{textDecoration:\"none\"}}>\n                        <button id=\"testbutton\" className=\"btn\"></button>\n                    </Link>\n                )}\n                \n            </div>            \n        </React.Fragment>\n    )\n}\n\nexport default Course;","import React,{useState} from 'react';\n\nimport Course from \"./Course\";\n\nconst AllCourses = (props) => {\n    const [courses, setCourses] = useState(props.courses);\n    return(\n        <React.Fragment>\n            {\n                courses.map(course => {\n                    return(\n                        <Course\n                            id={course.id}\n                            name={course.name}\n                            description={course.desc} \n                            rating={course.rating}\n                            price={course.price}\n                            totalTime={course.totalTime}\n                            lastSeenSectionId={course.lastSeenSectionId ? course.lastSeenSectionId : null}\n                        />\n                    )\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default AllCourses;","import React,{useEffect,useState} from 'react';\n\nimport myCourses from \"./courses\";\nimport AllCourses from \"../components/AllCourses\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst HomePage = () => {\n\n    // State for  loading spinner\n    const [isLoading , setIsLoading] = useState(false);\n    \n    // State for Error handling\n    const [error , setError] = useState();\n\n    const [allCourses , setAllCourses] = useState();\n\n    useEffect(() => {\n        const sendRequest = async () => {\n            try{\n                setIsLoading(true);\n            \n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + \"/course/\");\n                const responseData = await response.json();\n\n                if(responseData.message && responseData.message!==\"No Course found\"){\n                    throw new Error(responseData.message);\n                }\n\n                setAllCourses(responseData.courses);\n\n            }catch(err){\n                console.log(err);\n                setError(err.message || 'Something went wrong, please try again');\n            }\n            setIsLoading(false);\n        }\n        sendRequest();\n    },[]);\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    return(\n        <React.Fragment>\n            \n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n                \n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { !isLoading && allCourses && <AllCourses courses={allCourses} /> }\n        </React.Fragment>\n    )\n}\n\nexport default HomePage;","import React,{useState,useEffect,useContext} from 'react';\nimport {useParams, Link, useHistory} from 'react-router-dom';\n\nimport myCourses from \"./courses\";\nimport \"./CoursePage.css\";\nimport {AuthContext} from \"../../shared/context/AuthContext\";\nimport ratings from '../../photos/ratings.svg';\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\n\nconst CoursePage = () => {\n    const courseId = useParams().courseId;\n\n    const auth = useContext(AuthContext);\n\n    const history = useHistory();\n\n    // State for  loading spinner\n    const [isLoading , setIsLoading] = useState(false);\n    \n    // State for Error handling\n    const [error , setError] = useState();\n\n    const [course , setCourse] = useState();\n    \n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    useEffect(() => {\n        const sendRequest = async () => {\n            try{\n                setIsLoading(true);\n            \n                const response = await fetch( process.env.REACT_APP_BACKEND_URL+ `/course/${courseId}`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n\n                if(responseData.message){\n                    throw new Error(responseData.message);\n                }\n\n                setCourse(responseData.course);\n\n            }catch(err){\n                console.log(err);\n                setError(err.message || 'Something went wrong, please try again');\n            }\n            setIsLoading(false);\n        }\n        sendRequest();\n    },[])\n\n    const enrollCourseHandler = async () => {\n        try{\n            setIsLoading(true);\n            const response = await fetch( process.env.REACT_APP_BACKEND_URL + `/course/enrollcourse/${course.id}`,{\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization':'Bearer ' + auth.token\n                },\n                body: JSON.stringify({\n                    userId:auth.userId\n                })\n            });\n\n            const responseData = await response.json();\n\n            if(responseData.message){\n                throw new Error(responseData.message);\n            }\n\n            // history.push(`/subTopic/${course.topics[0].subTopics[0].id}`);\n        }catch(err){\n            console.log(err);\n            setError(err.message || 'Something went wrong, please try again');\n        }\n        setIsLoading(false);\n    }\n\n    return(\n        <React.Fragment>\n\n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n                \n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { !isLoading && course && (\n                <div className=\"course\">\n                    <div className=\"course-heading\"> \n                        <h1 className=\"course-name\">{course.name}</h1>\n                        <h6 className=\"rating\">{course.rating}<img className=\"ratings-img\" src={ratings}></img></h6>\n                        \n                        <div className=\"course-subDIV\">\n                            <p className=\"price\">₹{course.price}</p>\n\n                            {\n                                auth.isLogedIn ? (\n                                    <Link to={`/first/subTopic/${course.topics[0].subTopics[0]._id}`}>\n                                        <button className=\"btn btn-outline-dark enroll-btn\" onClick={enrollCourseHandler}>\n                                            <i style={{fontSize:\"1.4rem\"}} class=\"far fa-plus-square\"></i> Enroll Now\n                                        </button>\n                                    </Link>\n                                ):(\n                                    <a href=\"/authenticate\" style={{textDecoration:\"none\"}}>\n                                        <button className=\"btn btn-outline-dark enroll-btn\">\n                                            <i style={{fontSize:\"1.4rem\"}} class=\"far fa-plus-square\"></i> Enroll Now\n                                        </button>\n                                    </a>\n                                )\n                            }\n                            \n                            <div className=\"course-features\">\n                                <p><i class=\"fas fa-video\"></i> 40 hours on-demand video</p>\n                            </div>\n                        </div>\n\n                        <p className=\"time\">{course.totalTime} hours</p>\n                    </div>\n                    \n                    <div className=\"description-container\">\n                        <h3 style={{fontWeight:'700', marginBottom:'5%'}}>What you will learn</h3>\n                        {\n                            course.desc.map(des => {\n                                return(\n                                    <p className=\"learn-desription\"><i style={{marginRight:\"3%\"}} class=\"fas fa-check\"></i> {des.para}</p>\n                                )\n                            })\n                        }\n                    </div>\n\n                    <div className=\"course-content\">\n                        <h3 style={{fontWeight:'700', marginBottom:'0'}}>Course Content</h3>\n                        <p className=\"lec-length\">{course.topics.length} lectures</p> ▪ <p style={{color: 'rgb(153, 153, 153)'}} className=\"time\">{course.totalTime} hours</p>\n                        <div class=\"accordion\" id=\"accordionExample\">\n                            {\n                                course.topics.map(topic => {\n                                    return(\n                                        <React.Fragment>\n                                            <div class=\"accordion-item\">\n                                    \n                                                <h2 class=\"accordion-header\" id=\"headingOne\">\n                                                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#collapse-${topic._id}`} aria-expanded=\"true\" aria-controls={`collapse-${topic._id}`}>\n                                                        {topic.topicName}\n                                                    </button>\n                                                </h2>\n\n                                                <div id={`collapse-${topic._id}`} class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">                                            \n                                                    {\n                                                        topic.subTopics.map(subTopic => {\n                                                            return(\n                                                                <React.Fragment>    \n                                                                        <div class=\"accordion-body\">\n                                                                            <p style={{marginBottom:'0%'}}>{subTopic.sectionName}</p>\n                                                                        </div>                                                \n                                                                </React.Fragment>\n                                                            )\n                                                        })\n                                                }\n                                                </div>                                            \n                                            </div>\n                                        </React.Fragment>\n                                    )\n                                })\n                            }                   \n                        </div>\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    )\n}\n\n\n\nexport default CoursePage;\n","import React,{useState,useEffect,useContext} from 'react';\nimport {useParams,Link} from 'react-router-dom';\n\nimport \"./CourseView.css\";\nimport {AuthContext} from \"../../shared/context/AuthContext\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst SubTopic = () => {\n\n    const subTopicId = useParams().subtopic;\n\n    const auth = useContext(AuthContext);\n\n    // State for  loading spinner\n    const [isLoading , setIsLoading] = useState(false);\n    \n    // State for Error handling\n    const [error , setError] = useState();\n\n    const [subTopic , setSubTopic] = useState();\n\n    const [course , setCourse] = useState();\n\n    useEffect(() => {\n        const sendRequest = async () => {\n            try{\n                setIsLoading(true);\n            \n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/section/${subTopicId}/${auth.userId}`,{\n                    headers:{\n                        'Authorization':'Bearer ' + auth.token\n                    }\n                });\n                const responseData = await response.json();\n\n                if(responseData.message){\n                    throw new Error(responseData.message);\n                }\n\n                setSubTopic(responseData.section);\n\n                setCourse(responseData.courseId);\n\n            }catch(err){\n                console.log(err);\n                setError(err.message || 'Something went wrong, please try again');\n            }\n            setIsLoading(false);\n        }\n        sendRequest();\n    },[])\n\n    // Setting error to null after we click the screen\n    const errorHandler = () => {\n        setError(null);\n    }\n\n    return(\n        <React.Fragment>\n\n            {/* Showing error if occured */}\n            {error && (\n                <React.Fragment>\n                    <Backdrop onClick={errorHandler} />\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\n                </React.Fragment>\n            )}\n                \n            {/* Showing Loading spinner */}\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { !isLoading && subTopic && (\n                <React.Fragment>\n                    <div className=\"video-description\">\n                        <h1 className=\"subTopic-name\">{subTopic.sectionName}</h1>\n                        <h2 className=\"courseName\">{subTopic.courseName}</h2>\n\n                        <button className=\"btn btn-danger Query-btn\">Queries</button>\n                    </div>\n\n                    <iframe style={{marginTop:'1%'}} width=\"854\" height=\"480\" src={`${subTopic.videoLink}`}></iframe> \n                </React.Fragment>   \n            )}\n            \n            { !isLoading && course && (\n                <div className=\"course-content course-nav\">\n                    <h3 style={{color:'white', fontWeight:'700', marginBottom:'0'}}>Course Content</h3>\n                    <p className=\"lec-length\">{course.topics.length} lectures ▪ </p> <p style={{color: 'rgb(153, 153, 153)'}} className=\"time\">{course.totalTime} hours</p>\n                    <div class=\"accordion\" id=\"accordionExample\">\n                        {\n                            course.topics.map(topic => {\n                                return(\n                                    <React.Fragment>\n                                        <div class=\"accordion-item\">\n                                \n                                            <h2 class=\"accordion-header\" id=\"headingOne\">\n                                                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#collapse-${topic._id}`} aria-expanded=\"true\" aria-controls={`collapse-${topic._id}`}>\n                                                    {topic.topicName}\n                                                </button>\n                                            </h2>\n\n                                            <div id={`collapse-${topic._id}`} class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">                                            \n                                                {\n                                                    topic.subTopics.map(subTopic => {\n                                                        return(\n                                                            <React.Fragment>\n                                                                \n                                                                    <div class=\"accordion-body\">\n                                                                        <Link to={`/subtopic/${subTopic.id}`} style={{color:'black',textDecoration:\"none\"}}>\n                                                                            <p style={{marginBottom:'0%'}}>{subTopic.sectionName}</p>\n                                                                        </Link>\n                                                                    </div>\n                                                                                                                               \n                                                            </React.Fragment>\n                                                        )\n                                                    })\n                                            }\n                                            </div>                                            \n                                        </div>\n                                    </React.Fragment>\n                                )\n                            })\n                        }                   \n                    </div>\n                </div>\n            )}\n\n        </React.Fragment>\n    )\n}\n\nexport default SubTopic;","import React,{useState,useEffect,useContext} from 'react';\r\nimport {useParams,Link} from 'react-router-dom';\r\n\r\nimport \"./CourseView.css\";\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst FirstSubTopic = () => {\r\n\r\n    const subTopicId = useParams().subtopic;\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for  loading spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for Error handling\r\n    const [error , setError] = useState();\r\n\r\n    const [subTopic , setSubTopic] = useState();\r\n\r\n    const [course , setCourse] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                setIsLoading(true);\r\n            \r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/section/first/${subTopicId}`,{\r\n                    headers:{\r\n                        'Authorization':'Bearer ' + auth.token\r\n                    }\r\n                });\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setSubTopic(responseData.section);\r\n\r\n                setCourse(responseData.courseId);\r\n\r\n            }catch(err){\r\n                console.log(err);\r\n                setError(err.message || 'Something went wrong, please try again');\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        sendRequest();\r\n    },[])\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n\r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n                \r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && subTopic && (\r\n                <React.Fragment>\r\n                    <div className=\"video-description\">\r\n                        <h1 className=\"subTopic-name\">{subTopic.sectionName}</h1>\r\n                        <h2 className=\"courseName\">{subTopic.courseName}</h2>\r\n\r\n                        <button className=\"btn btn-danger Query-btn\">Queries</button>\r\n                    </div>\r\n\r\n                    <iframe style={{marginTop:'1%'}} width=\"854\" height=\"480\" src={`${subTopic.videoLink}`}></iframe> \r\n                </React.Fragment>   \r\n            )}\r\n            \r\n            { !isLoading && course && (\r\n                <div className=\"course-content course-nav\">\r\n                    <h3 style={{color:'white', fontWeight:'700', marginBottom:'0'}}>Course Content</h3>\r\n                    <p className=\"lec-length\">{course.topics.length} lectures ▪ </p> <p style={{color: 'rgb(153, 153, 153)'}} className=\"time\">{course.totalTime} hours</p>\r\n                    <div class=\"accordion\" id=\"accordionExample\">\r\n                        {\r\n                            course.topics.map(topic => {\r\n                                return(\r\n                                    <React.Fragment>\r\n                                        <div class=\"accordion-item\">\r\n                                \r\n                                            <h2 class=\"accordion-header\" id=\"headingOne\">\r\n                                                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#collapse-${topic._id}`} aria-expanded=\"true\" aria-controls={`collapse-${topic._id}`}>\r\n                                                    {topic.topicName}\r\n                                                </button>\r\n                                            </h2>\r\n\r\n                                            <div id={`collapse-${topic._id}`} class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">                                            \r\n                                                {\r\n                                                    topic.subTopics.map(subTopic => {\r\n                                                        return(\r\n                                                            <React.Fragment>\r\n                                                                \r\n                                                                    <div class=\"accordion-body\">\r\n                                                                        <Link to={`/subtopic/${subTopic.id}`} style={{color:'black',textDecoration:\"none\"}}>\r\n                                                                            <p style={{marginBottom:'0%'}}>{subTopic.sectionName}</p>\r\n                                                                        </Link>\r\n                                                                    </div>\r\n                                                                                                                               \r\n                                                            </React.Fragment>\r\n                                                        )\r\n                                                    })\r\n                                            }\r\n                                            </div>                                            \r\n                                        </div>\r\n                                    </React.Fragment>\r\n                                )\r\n                            })\r\n                        }                   \r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default FirstSubTopic;","import React,{useEffect,useState,useContext} from 'react';\r\n\r\nimport myCourses from \"./courses\";\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport AllCourses from \"../components/AllCourses\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UserCourses = () => {\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for  loading spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for Error handling\r\n    const [error , setError] = useState();\r\n\r\n    const [allCourses , setAllCourses] = useState();\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                setIsLoading(true);\r\n            \r\n                const response = await fetch(process.env.REACT_APP_BACKEND_URL+ `/user/${auth.userId}/courses`,{\r\n                    headers:{\r\n                        'Authorization':'Bearer ' + auth.token\r\n                    }\r\n                });\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message && responseData.message!==\"No Course found\"){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                const courses = responseData.courses.map((course,index) => {\r\n                    return({\r\n                        ...course,\r\n                        lastSeenSectionId: responseData.myCoursesData[index].lastSeenSectionId\r\n                    })\r\n                })\r\n\r\n                setAllCourses(courses);\r\n            }catch(err){\r\n                console.log(err);\r\n                setError(err.message || 'Something went wrong, please try again');\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        sendRequest();\r\n    },[]);\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n                \r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && allCourses && <AllCourses courses={allCourses} /> }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UserCourses;","import React,{useState , useCallback} from 'react';\nimport { BrowserRouter as Router, Switch , Route, Redirect} from 'react-router-dom';\n\nimport './App.css';\nimport Authenticate from \"./user/components/Authenticate\";\nimport PortalNavbar from './shared/components/PortalNavbar';\nimport PortalHome from \"./portal home/pages/PortalHome\";\nimport QuesPage from \"./portal home/pages/QuesPage\";\nimport CatQuestions from \"./portal home/pages/CatQuestions\";\nimport UserQuestions from \"./portal home/pages/UserQuestions\";\nimport NewQuestion from \"./portal home/pages/NewQuestion\";\nimport {AuthContext} from \"./shared/context/AuthContext\";\nimport UpdateQues from \"./portal home/pages/UpdateQues\";\nimport UpdateAnswer from \"./portal home/pages/UpdateAnswer\";\nimport UserAnswers from \"./portal home/pages/UserAnswers\";\nimport SavedAnswers from \"./portal home/pages/SavedAnswers\";\nimport Reset from \"./user/components/Reset\";\nimport NewPassword from \"./user/components/NewPassword\";\nimport HomePage from \"./courses portal/pages/HomePage\";\nimport CoursePage from \"./courses portal/pages/CoursePage\";\nimport SubTopic from \"./courses portal/pages/SubTopic\";\nimport FirstSubTopic from \"./courses portal/pages/FirstSubTopic\";\nimport UserCourses from \"./courses portal/pages/UserCourses\";\nimport {useAuth} from \"./shared/hoocks/auth-hook\";\n\n \nfunction App() {\n\n  const {token,userId,login,logout} = useAuth();\n\n  let routes;\n\n  if(!token){\n    routes = (\n      <Switch>\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalNavbar />\n            <PortalHome />\n          </Route>\n\n          {/*  User Authentication  */}\n          <Route path=\"/authenticate\" exact>      \n            <Authenticate />\n          </Route>\n\n          <Route path=\"/reset\" exact>\n            <Reset />\n          </Route>\n\n          <Route path=\"/reset/:token\" exact>\n              <NewPassword />\n          </Route>\n\n          {/*  Question ( Single Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <PortalNavbar />\n            <QuesPage />\n          </Route>\n\n          {/*  Questions According to the Category  */}\n          <Route path=\"/questions/:catID\" exact>\n            <PortalNavbar />\n            <CatQuestions />\n          </Route>\n\n          <Route path=\"/courses\" exact>\n            <HomePage />\n          </Route>\n\n          <Route path=\"/course/:courseId\" exact>\n            <CoursePage />\n          </Route>\n\n          <Route path=\"/subTopic/:subtopic\">\n            <SubTopic />\n          </Route>\n\n          <Redirect to=\"/\" /> \n      </Switch>\n    )\n  }\n  else{\n    routes = (\n      <Switch>\n\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalNavbar />\n            <PortalHome />\n          </Route>\n\n          {/*  Question ( Add New Question)  */}\n          <Route path = \"/question/new\" exact>\n            <PortalNavbar />\n            <NewQuestion />\n          </Route>\n\n          {/*  Question ( Single Question Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <PortalNavbar />\n            <QuesPage />\n          </Route>\n\n          {/*  Question ( According to the Category )  */}\n          <Route path=\"/questions/:catID\" exact>\n            <PortalNavbar />\n            <CatQuestions />\n          </Route>\n\n          {/*  Question ( Update Question )  */}\n          <Route path=\"/:quesId/update\" exact>\n            <PortalNavbar />\n            <UpdateQues />\n          </Route>\n\n          {/*  Question ( Update Question )  */}\n          <Route path=\"/update/:answerId\" exact>\n            <PortalNavbar />\n            <UpdateAnswer />\n          </Route>\n          \n          {/*  User ( Questions asked By User )  */}\n          <Route path=\"/:userId/questions\" exact>\n            <PortalNavbar />\n            <UserQuestions />\n          </Route>\n\n          {/*  User ( Answers given By User )  */}\n          <Route path=\"/:userId/answers\" exact>\n            <PortalNavbar />\n            <UserAnswers />\n          </Route>\n\n          {/*  User ( Show Saved Answers of User )  */}\n          <Route path=\"/:userId/savedAnswers\" exact>\n            <PortalNavbar />\n            <SavedAnswers />\n          </Route>\n\n          <Route path=\"/courses\" exact>\n            <HomePage />\n          </Route>\n\n          <Route path=\"/course/:courseId\" exact>\n            <CoursePage />\n          </Route>\n\n          <Route path=\"/subTopic/:subtopic\">\n            <SubTopic />\n          </Route>\n\n          <Route path=\"/first/subTopic/:subtopic\">\n            <FirstSubTopic />\n          </Route>\n\n          <Route path=\"/:userId/courses\">\n            <UserCourses />\n          </Route>\n        \n          <Redirect to=\"/\" />\n        </Switch>\n    )\n  }\n\n\n  return (\n    <AuthContext.Provider value={{\n      isLogedIn:!!token,\n      token:token,\n      userId:userId,\n      login:login,\n      logout:logout\n    }}>\n      <Router>\n        <main>\n          \n          {routes}   \n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}