[{"F:\\InnoventX\\Website\\portal\\src\\index.js":"1","F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js":"2","F:\\InnoventX\\Website\\portal\\src\\App.js":"3","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx":"4","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js":"5","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx":"6","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesPage.js":"7","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js":"8","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js":"9","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js":"10","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\NewQuestion.js":"11","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js":"12","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js":"13","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\CatQuestions.js":"14","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js":"15","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js":"16","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UpdateQues.js":"17","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js":"18","F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx":"19","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js":"20","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":2991,"mtime":1615878567466,"results":"25","hashOfConfig":"23"},{"size":3695,"mtime":1608367649199,"results":"26","hashOfConfig":"23"},{"size":3472,"mtime":1608361033235,"results":"27","hashOfConfig":"23"},{"size":3345,"mtime":1615975503432,"results":"28","hashOfConfig":"23"},{"size":7840,"mtime":1615983429468,"results":"29","hashOfConfig":"23"},{"size":2143,"mtime":1615980556181,"results":"30","hashOfConfig":"23"},{"size":989,"mtime":1615975940185,"results":"31","hashOfConfig":"23"},{"size":548,"mtime":1608361233563,"results":"32","hashOfConfig":"23"},{"size":1981,"mtime":1608376611462,"results":"33","hashOfConfig":"23"},{"size":2217,"mtime":1608616844621,"results":"34","hashOfConfig":"23"},{"size":1710,"mtime":1608301980207,"results":"35","hashOfConfig":"23"},{"size":764,"mtime":1608367104470,"results":"36","hashOfConfig":"23"},{"size":744,"mtime":1615628802411,"results":"37","hashOfConfig":"23"},{"size":197,"mtime":1615636566217,"results":"38","hashOfConfig":"23"},{"size":4255,"mtime":1608376193598,"results":"39","hashOfConfig":"23"},{"size":1506,"mtime":1608375686295,"results":"40","hashOfConfig":"23"},{"size":10445,"mtime":1615919796868,"results":"41","hashOfConfig":"23"},{"size":286,"mtime":1615919796867,"results":"42","hashOfConfig":"23"},{"size":300,"mtime":1615919796865,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"suyroj",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"F:\\InnoventX\\Website\\portal\\src\\index.js",[],["94","95"],"F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js",[],"F:\\InnoventX\\Website\\portal\\src\\App.js",["96"],"import React,{useState , useCallback} from 'react';\nimport { BrowserRouter as Router, Switch , Route, Redirect} from 'react-router-dom';\n\nimport './App.css';\nimport Authenticate from \"./user/components/Authenticate\";\nimport PortalNavbar from './shared/components/PortalNavbar';\nimport PortalHome from \"./portal home/pages/PortalHome\";\nimport QuesPage from \"./portal home/components/QuesPage\";\nimport CatQuestions from \"./portal home/components/CatQuestions\";\nimport UserQuestions from \"./portal home/components/UserQuestions\";\nimport NewQuestion from \"./portal home/components/NewQuestion\";\nimport {AuthContext} from \"./shared/context/AuthContext\";\nimport UpdateQues from \"./portal home/components/UpdateQues\";\n\nfunction App() {\n\n  // State for Login\n  const [isLogedIn, setIsLogedIn] = useState(false);\n\n  // Staate for userId comming from BACKEND\n  const [userId , setUserId] = useState(null);\n\n  const login = useCallback((userId) => {\n    setIsLogedIn(true);\n    setUserId(userId);\n  },[]);\n\n  const logout = useCallback((userId) => {\n    setIsLogedIn(false);\n    setUserId(null);\n  },[]);\n\n  let routes;\n\n  if(!isLogedIn){\n    routes = (\n      <Switch>\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalHome />\n          </Route>\n\n          {/*  User Authentication  */}\n          <Route path=\"/authenticate\" exact>      \n            <Authenticate />\n          </Route>\n\n          {/*  Question ( Single Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <QuesPage />\n          </Route>\n\n          {/*  Questions According to the Category  */}\n          <Route path=\"/questions/:catID\" exact>\n            <CatQuestions />\n          </Route>\n\n          <Redirect to=\"/\" /> \n      </Switch>\n    )\n  }\n  else{\n    routes = (\n      <Switch>\n\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalHome />\n          </Route>\n\n          {/*  Question ( Add New Question)  */}\n          <Route path = \"/question/new\" exact>\n            <NewQuestion />\n          </Route>\n\n          {/*  Question ( Single Question Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <QuesPage />\n          </Route>\n\n          {/*  Question ( According to the Category )  */}\n          <Route path=\"/questions/:catID\" exact>\n            <CatQuestions />\n          </Route>\n\n          {/*  Question ( Update Question )  */}\n          <Route path=\"/:quesId/update\" exact>\n            <UpdateQues />\n          </Route>\n\n          {/*  User ( Questions asked By User )  */}\n          <Route path=\"/:userId/questions\" exact>\n            <UserQuestions />\n          </Route>\n\n          <Redirect to=\"/\" />\n        </Switch>\n    )\n  }\n\n\n  return (\n    <AuthContext.Provider value={{\n      isLogedIn:isLogedIn,\n      login:login,\n      logout:logout\n    }}>\n      <Router>\n        <main>\n          <PortalNavbar />\n          {routes}   \n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx",["97","98"],"import React,{useState,useContext} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nimport logo from '../../photos/logo.png';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport \"./PortalNavbar.css\";\r\nimport {AuthContext} from '../../shared/context/AuthContext';\r\n\r\nfunction PortalNavbar(){\r\n\r\n    const [search,setSearch] = useState(\"\");\r\n    const auth = useContext(AuthContext);\r\n\r\n    function handleSearch(event){\r\n        const ipValue = event.target.value;\r\n        setSearch(ipValue);\r\n    }\r\n\r\n    function handleClick(){\r\n        alert(\"Search: \" + search);\r\n        setSearch(\"\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n                <a className=\"navbar-brand\" href=\"#\"><img className=\"logo\" src={logo} />InnoventX</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/\" className=\"nav-link\" style={{color:\"white\"}}>Home</NavLink>\r\n                        </li>\r\n\r\n                        { !auth.isLogedIn && (  \r\n                            <li className=\"nav-item\">\r\n                                <div className=\"portal-div\">\r\n                                    <NavLink to=\"/authenticate\" className=\"nav-link\"><p className=\"portal-link\">Portal</p></NavLink>\r\n                                </div>\r\n                            </li>\r\n                            )\r\n                        }\r\n\r\n                        { auth.isLogedIn && ( \r\n                            <React.Fragment>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to={`/userid/question`} className=\"nav-link\" style={{color:\"white\"}}>My Ques</NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <form className=\"form-inline my-2 my-lg-0\">\r\n                                    <div className=\"button-in\">\r\n                                        <input  className=\"search\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={handleSearch}/>\r\n                                        <button className=\"search-btn\" onClick={handleClick}><SearchIcon style={{color:\"white\"}}/></button>\r\n                                    </div>\r\n                                </form>\r\n                            </li>\r\n                            \r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/question/new\">\r\n                                    <div className=\"ask-div\">ASK</div>\r\n                                </NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/\" className=\"nav-link\"><AccountCircleIcon style={{color:\"#4CD9D9\",fontSize:\"2.3rem\",marginLeft:\"0\"}} /></NavLink>\r\n                            </li>\r\n                            </React.Fragment>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PortalNavbar;\r\n\r\n","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesPage.js",["99"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js",["100"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js",["101"],"import React,{useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport myQuestions from './questions';\r\n\r\nconst UserQuestions = () => {\r\n    const userId = useParams().userId;\r\n\r\n    const userQuestions = myQuestions.find((ques) => {\r\n        return ques.studentName === userId;\r\n    });\r\n\r\n    if(!userQuestions){\r\n        return(\r\n            <h1>No Questions</h1>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            {userQuestions}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UserQuestions;","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\NewQuestion.js",["102","103"],"import React,{useCallback, useReducer} from 'react';\r\nimport Input from '../../shared/components/Input';\r\n\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\n\r\n\r\nconst NewQuestion = () => {\r\n\r\n\r\n    const [formState, handleInput] = useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false\r\n            }\r\n        },\r\n        false\r\n    )\r\n    \r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(formState.inputs);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={submitHandler}>\r\n            <Input \r\n                id=\"category\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Category\"\r\n                placeholder=\"Arduino\"\r\n                errorMessage=\"Please enter a category\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input \r\n                id=\"title\"\r\n                element=\"textarea\"\r\n                label=\"Title\"\r\n                errorMessage = \"Please enter a valid title\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input  \r\n                id=\"wholeQuestion\"\r\n                element=\"textarea\"\r\n                rows={5}\r\n                label=\"Question\"\r\n                errorMessage=\"Question must be of 10 Characters\"\r\n                validators={[VALIDATOR_MINLENGTH(10)]}\r\n                onInput={handleInput}\r\n            />\r\n            <button disabled={!formState.isValid}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewQuestion;","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\CatQuestions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js",["104"],"import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./Categories.css\";\r\n\r\nconst Categories = (props) => {\r\n\r\n    const [categories,setCategorite]=useState([\"Arduino\",\"RPI\",\"Augmented Reality\",\"Virtual reality\",\"ROS\",\"Dron Tech\",\"my tech\"]);\r\n\r\n    const allCategories = categories.map((category) => {\r\n        return (\r\n            <Link to={`/questions/${category}`} className=\"single-category\">{category}</Link>\r\n        )  \r\n    });\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <h6 className=\"category-heading\">ALL CATEGORIES</h6>\r\n            <div className=\"categories-div\">\r\n                {allCategories}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Categories;","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UpdateQues.js",["105","106","107","108"],"import React,{useState,useReducer,useCallback} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport myQuestions from \"./questions\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\n\r\n/*\r\nconst formReducer = (state,action) => {\r\n    switch(action.type){\r\n        case 'INPUT-CHANGE':\r\n            let formIsValid = true;\r\n            for(const inputId in state.inputs){\r\n                if(inputId === action.inputIdId){\r\n                    formIsValid = formIsValid && action.isValid\r\n                }else{\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid\r\n                }\r\n            }\r\n\r\n            return{\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId] : {\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n        \r\n            default:\r\n                return state\r\n    }\r\n}\r\n*/\r\n\r\n\r\nconst UpdateQues = (props) => {\r\n    const quesId = useParams().quesId;\r\n\r\n    const myQuestion = myQuestions.find((ques) => {\r\n        return ques.id ===quesId;\r\n    });\r\n\r\n    /*\r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n        inputs:{\r\n            category:{\r\n                value:myQuestion.category,\r\n                isValid:true,\r\n            },\r\n            title:{\r\n                value:myQuestion.title,\r\n                isValid:true\r\n            },\r\n            wholeQuestion:{\r\n                value:myQuestion.wholeQuestion,\r\n                isValid:true,\r\n            }\r\n        },\r\n        isValid:true\r\n    });\r\n\r\n    const handleInput = useCallback((id,value,isValid) => {\r\n        dispatch({\r\n            type:'INPUT-CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n    },[])\r\n    */\r\n\r\n   const [formState, handleInput, setFormData] =  useForm(\r\n    {\r\n        category:{\r\n            value:myQuestion.category,\r\n            isValid:true,\r\n        },\r\n        title:{\r\n            value:myQuestion.title,\r\n            isValid:true\r\n        },\r\n        wholeQuestion:{\r\n            value:myQuestion.wholeQuestion,\r\n            isValid:true,\r\n        }\r\n    },\r\n    true\r\n   )\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(formState.inputs);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <form onSubmit={submitHandler}>\r\n            <Input \r\n                id=\"category\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Category\"\r\n                value={formState.inputs.category.value}\r\n                isValid={formState.inputs.category.isValid}\r\n                isTouch={true}\r\n                errorMessage=\"Please enter a category\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input \r\n                id=\"title\"\r\n                element=\"textarea\"\r\n                label=\"Title\"\r\n                value={formState.inputs.title.value}\r\n                isValid={formState.inputs.title.isValid}\r\n                isTouch={true}\r\n                errorMessage = \"Please enter a valid title\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input  \r\n                id=\"wholeQuestion\"\r\n                element=\"textarea\"\r\n                rows={5}\r\n                label=\"Question\"\r\n                value={formState.inputs.wholeQuestion.value}\r\n                isValid={formState.inputs.wholeQuestion.isValid}\r\n                isTouch={true}\r\n                errorMessage=\"Question must be of 10 Characters\"\r\n                validators={[VALIDATOR_MINLENGTH(10)]}\r\n                onInput={handleInput}\r\n            />\r\n            <button disabled={!formState.isValid}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateQues;","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js",[],"F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx",["109","110","111"],"import React,{useState,useContext,useReducer,useCallback} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport logo from '../../photos/logo.png';\r\nimport './SignIn.css';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from \"../../shared/components/validators\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\n// This function will be called whenever we use \"dispatch\"\r\nconst formReducer = ( state, action) => {\r\n\r\n    // Checks the action type\r\n    switch( action.type ){\r\n\r\n        case 'INPUT_CHANGE':\r\n            // Initially the form is valid\r\n            let formIsValid = true;\r\n\r\n            // Traversing through all inputs\r\n            for(const inputId in state.inputs){\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n\r\n                // Taking the Input which is chaning right now\r\n                if(inputId === action.inputId){\r\n                    // The form will only be valid if the changed \"Input\" is valid\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else{\r\n                    // Setting the default values for the rest input components\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return{\r\n                // Returning the State after the input state is changed\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId]:{\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n\r\n        // For setting the data which we pass\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs:action.inputs,\r\n                isValid:action.formIsValid\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction Authenticate(){\r\n\r\n    // Using AuthContext for user login detalis(userId)  \r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for submit button\r\n    const [onSubmit , setOnSubmit] = useState(false);\r\n\r\n    // State which display Login form when set to true\r\n    const [isLogin , setIsLogin] = useState(true);\r\n\r\n    // Initial state of form(login)  \r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n       inputs:{\r\n        email:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n        password:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n    },\r\n        isValid:false\r\n    });\r\n\r\n    // State For Loading Spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for error modal or block\r\n    const [error, setError] = useState();\r\n\r\n    // Trigers whenever input changes\r\n    const handleInput = useCallback((id , value, isValid) => {\r\n        dispatch({\r\n            type:'INPUT_CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n\r\n    },[]);\r\n\r\n    // To set the data after the switching from signup->login or visa-versa \r\n    const setData = (inputs,formIsValid) => {\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs:inputs,\r\n            formIsValid:formIsValid\r\n        })\r\n    }\r\n\r\n    // Triger when we click the \"SWITCH\" button\r\n    const handleSwitch = (event) => {\r\n\r\n        // This prevents the form to get submitted\r\n        setOnSubmit(false);\r\n\r\n        if(!isLogin){\r\n            // Signup -> Login\r\n            setData({\r\n                ...formState.inputs,\r\n                name:undefined \r\n            },\r\n            formState.inputs.email.isValid && formState.inputs)\r\n        }else{\r\n            // Login -> Signup\r\n            setData(\r\n                {\r\n                  ...formState.inputs,\r\n                  name: {\r\n                    value: '',\r\n                    isValid: false\r\n                  }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin(prevMode => !prevMode);\r\n    }\r\n\r\n    // Triggers when the form is submitted\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // If the submit button is clicked \r\n        if(onSubmit){\r\n\r\n            // If the user is Loggin in\r\n            if(isLogin){\r\n                try{\r\n                    // Showing the Loaading spinney till the data is arrived\r\n                    setIsLoading(true);\r\n\r\n                    // Getting the data from api\r\n                    const response = await fetch(\"http://localhost:5000/api/user/login\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n\r\n                    // Converting the data into json format\r\n                    const responseData = await response.json();\r\n\r\n                    // It the error is comming as a response\r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n                    console.log(responseData);\r\n\r\n                    // Getting userId in Frontend\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n\r\n                    // Showing the Error modal in frontend\r\n                    setError(err.message || 'Something wentt wrong, please try again');\r\n                }\r\n\r\n                // After the data is arrived the remove the loading spinner\r\n                setIsLoading(false);\r\n            }else{\r\n                try{\r\n                    setIsLoading(true);\r\n                    const response = await fetch(\"http://localhost:5000/api/user/signup\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name:formState.inputs.name.value,\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n        \r\n                    const responseData = await response.json();\r\n        \r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n                    console.log(responseData);\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n                    setError(err.message || 'Something went wrong, please try again.');\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Triggered when the submit button is clicked\r\n    const haldleSubmitButton = (event) => {\r\n        event.preventDefault();\r\n        // The form shoul only be submitted now\r\n        setOnSubmit(true);\r\n        handleSubmit(event);\r\n    }\r\n\r\n    // To handle error\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {/* Showing error which comming from backend */}\r\n            {error && <Backdrop onClick={errorHandler} />}\r\n            {error && <h1>{error}</h1>} \r\n\r\n            {/* Showing Loading Spinner till the data is arrived */}\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n            \r\n            <div className=\"my-form\">\r\n                <img className=\"logo2\" src={logo}/>\r\n\r\n                {/* Authentication Form */}\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                    {/* Display \"Name\" only if it is in Signup form(!isLogin) */}\r\n                    { !isLogin && (<Input \r\n                        id=\"name\"\r\n                        element=\"input\"\r\n                        placeholder=\"Use Name\"\r\n                        type=\"text\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.name.value}\r\n                        onInput = {handleInput}\r\n                        validators = {[VALIDATOR_REQUIRE()]}\r\n                        errorMessage=\"Please enter a valid user name\"\r\n                    />)\r\n                    }\r\n\r\n                    {/* Email & password input components */}\r\n                    <Input \r\n                        id=\"email\"\r\n                        element=\"input\"\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.email.value}\r\n                        onInput={handleInput}\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorMessage=\"Please enter a valid email\"\r\n                    />\r\n                    <Input\r\n                        id=\"password\"\r\n                        element=\"input\"\r\n                        type=\"password\"\r\n                        placeholder=\"password\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.password.value}\r\n                        onInput={handleInput}\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorMessage=\"Pleaase enter a password of length 6\"\r\n                    />\r\n\r\n                    {/* This button will be disabled if the form is not valid */}\r\n                    <button disabled={!formState.isValid} onClick={haldleSubmitButton}>{ isLogin ? \"Login\" : \"Signup\" }</button>\r\n\r\n                    {/* Switching button */}\r\n                    <button onClick={handleSwitch}>Switch to { isLogin ? \"Signup\" : \"Login\" }</button>\r\n                </form>\r\n            </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Authenticate; ","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":21,"column":10,"nodeType":"118","messageId":"119","endLine":21,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":28,"column":17,"nodeType":"122","endLine":28,"endColumn":54},{"ruleId":"123","severity":1,"message":"124","line":28,"column":54,"nodeType":"122","endLine":28,"endColumn":89},{"ruleId":"125","severity":1,"message":"126","line":57,"column":7,"nodeType":"127","endLine":57,"endColumn":9,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":38,"column":7,"nodeType":"127","endLine":38,"endColumn":9,"suggestions":"130"},{"ruleId":"116","severity":1,"message":"131","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":23},{"ruleId":"116","severity":1,"message":"132","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":26},{"ruleId":"116","severity":1,"message":"133","line":1,"column":28,"nodeType":"118","messageId":"119","endLine":1,"endColumn":38},{"ruleId":"116","severity":1,"message":"134","line":7,"column":23,"nodeType":"118","messageId":"119","endLine":7,"endColumn":36},{"ruleId":"116","severity":1,"message":"131","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":23},{"ruleId":"116","severity":1,"message":"133","line":1,"column":24,"nodeType":"118","messageId":"119","endLine":1,"endColumn":34},{"ruleId":"116","severity":1,"message":"132","line":1,"column":35,"nodeType":"118","messageId":"119","endLine":1,"endColumn":46},{"ruleId":"116","severity":1,"message":"135","line":77,"column":35,"nodeType":"118","messageId":"119","endLine":77,"endColumn":46},{"ruleId":"116","severity":1,"message":"136","line":2,"column":9,"nodeType":"118","messageId":"119","endLine":2,"endColumn":19},{"ruleId":"116","severity":1,"message":"137","line":9,"column":9,"nodeType":"118","messageId":"119","endLine":9,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":244,"column":17,"nodeType":"122","endLine":244,"endColumn":52},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'quesId'. Either include it or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'props.userId'. Either include it or remove the dependency array.",["141"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'useReducer' is defined but never used.","'setCategorite' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'useHistory' is defined but never used.","'useForm' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [quesId]",{"range":"146","text":"147"},"Update the dependencies array to be: [props.userId]",{"range":"148","text":"149"},[2253,2255],"[quesId]",[1254,1256],"[props.userId]"]