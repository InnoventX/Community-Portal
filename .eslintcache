[{"F:\\InnoventX\\Website\\portal\\src\\index.js":"1","F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js":"2","F:\\InnoventX\\Website\\portal\\src\\App.js":"3","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx":"4","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js":"5","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx":"6","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js":"7","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js":"8","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js":"9","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js":"10","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js":"11","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js":"12","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js":"13","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js":"14","F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx":"15","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js":"16","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js":"17","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\QuesPage.js":"18","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\ErrorModal.js":"19","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateQues.js":"20","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\NewQuestion.js":"21","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\CatQuestions.js":"22","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateAnswer.js":"23","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UserAnswers.js":"24","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\SavedAnswers.js":"25"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":3625,"mtime":1616420649184,"results":"29","hashOfConfig":"27"},{"size":5056,"mtime":1616501638752,"results":"30","hashOfConfig":"27"},{"size":3472,"mtime":1608361033235,"results":"31","hashOfConfig":"27"},{"size":3605,"mtime":1616138074715,"results":"32","hashOfConfig":"27"},{"size":1478,"mtime":1616403246807,"results":"33","hashOfConfig":"27"},{"size":1081,"mtime":1616403126308,"results":"34","hashOfConfig":"27"},{"size":3038,"mtime":1616408033230,"results":"35","hashOfConfig":"27"},{"size":2351,"mtime":1616671976398,"results":"36","hashOfConfig":"27"},{"size":1710,"mtime":1608301980207,"results":"37","hashOfConfig":"27"},{"size":888,"mtime":1616145004754,"results":"38","hashOfConfig":"27"},{"size":197,"mtime":1615636566217,"results":"39","hashOfConfig":"27"},{"size":1506,"mtime":1608375686295,"results":"40","hashOfConfig":"27"},{"size":12580,"mtime":1616668614772,"results":"41","hashOfConfig":"27"},{"size":286,"mtime":1615919796867,"results":"42","hashOfConfig":"27"},{"size":300,"mtime":1615919796865,"results":"43","hashOfConfig":"27"},{"size":32365,"mtime":1616681772698,"results":"44","hashOfConfig":"27"},{"size":420,"mtime":1616262890234,"results":"45","hashOfConfig":"27"},{"size":8281,"mtime":1616674516958,"results":"46","hashOfConfig":"27"},{"size":7737,"mtime":1616675977125,"results":"47","hashOfConfig":"27"},{"size":3268,"mtime":1616158203381,"results":"48","hashOfConfig":"27"},{"size":5643,"mtime":1616681424210,"results":"49","hashOfConfig":"27"},{"size":4656,"mtime":1616681468407,"results":"50","hashOfConfig":"27"},{"size":4705,"mtime":1616681381023,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"suyroj",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\InnoventX\\Website\\portal\\src\\index.js",[],["111","112"],"F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js",[],"F:\\InnoventX\\Website\\portal\\src\\App.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx",["113","114"],"import React,{useState,useContext} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nimport ask from '../../photos/ask-add.svg';\r\nimport logo from '../../photos/logo.svg';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport \"./PortalNavbar.css\";\r\nimport {AuthContext} from '../../shared/context/AuthContext';\r\n\r\nfunction PortalNavbar(){\r\n\r\n    const [search,setSearch] = useState(\"\");\r\n    const auth = useContext(AuthContext);\r\n\r\n    function handleSearch(event){\r\n        const ipValue = event.target.value;\r\n        searchkey(ipValue);\r\n        setSearch(ipValue);\r\n    }\r\n\r\n    function handleClick(){\r\n        // alert(\"Search: \" + search);\r\n        setSearch(\"\");\r\n    }\r\n    \r\n    function searchkey(search) {\r\n        let filter = search.toUpperCase();\r\n        let title = document.querySelectorAll(\"h4.question-title\");\r\n        for (let i = 0; i < title.length; i++) {\r\n            let h4 = document.querySelectorAll(\"h4.question-title\")[i];\r\n            if (h4) {\r\n                let textValueh = h4.textContent;\r\n    \r\n                if (textValueh.toUpperCase().indexOf(filter) > -1) {\r\n                    document.querySelectorAll(\"div.question-container\")[i].style.display = \"\";\r\n                } else {\r\n                    document.querySelectorAll(\"div.question-container\")[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    \r\n    }\r\n \r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                <span style={{color: \"red\"}}>I</span>NNOVENT<span style={{color: \"red\"}}>X</span>\r\n            </a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"nav nav-pills justify-content-right\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/\" className=\"nav-link\" exact>Home</NavLink>\r\n                        </li>\r\n\r\n                        { !auth.isLogedIn && (  \r\n                            <li className=\"nav-item\">\r\n                                <div className=\"portal-div\">\r\n                                    <NavLink to=\"/authenticate\" className=\"nav-link PORTAL\">Portal</NavLink>\r\n                                </div>\r\n                            </li>\r\n                            )\r\n                        }\r\n\r\n                        { auth.isLogedIn && ( \r\n                            <React.Fragment>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to={`/${auth.userId}/questions`} className=\"nav-link\">My Ques</NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to={`/${auth.userId}/answers`} className=\"nav-link\">My Ans</NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to={`/${auth.userId}/savedAnswers`} className=\"nav-link\">Save</NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <form className=\"form-inline my-2 my-lg-0\">\r\n                                    <div className=\"button-in\">\r\n                                        <input  className=\"search\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={handleSearch}/>\r\n                                        <button className=\"search-btn\" onClick={handleClick}><SearchIcon style={{color:\"white\"}}/></button>\r\n                                    </div>\r\n                                </form>\r\n                            </li>\r\n                            \r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/question/new\" style={{textDecoration:\"none\"}} className=\"nav-link\">\r\n                                    <img className=\"ask-button\" src={ask}></img>ASK\r\n                                </NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/\" className=\"PROFILE\"><AccountCircleIcon style={{fontSize:\"2.3rem\",marginLeft:\"2\", marginTop:\"8\"}} /></NavLink>\r\n                            </li>\r\n                            </React.Fragment>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PortalNavbar;","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js",[],["115","116"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js",["117"],"// This component is responsible for rendering the question block on Portal's home page\r\n\r\nimport React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport answer from '../../photos/answer.svg';\r\n\r\nimport \"./Question.css\";\r\n\r\nconst Question = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            \r\n                <div className=\"question-container\">\r\n                    <div className=\"user-icon\"><AccountCircleIcon className=\"user-icon\" style={{fontSize:\"3.3rem\"}}/></div>\r\n                    <h6 className=\"student-name\">{props.userName}</h6>\r\n                    <h6 className=\"category\">{props.category}</h6>\r\n                    <h4 className=\"question-title\">{props.title}</h4>\r\n                    <p className=\"read-more\">{props.wholeQuestion.substring(0,120)}\r\n                        <Link to={`/ques/${props.id}`} style={{textDecoration:\"none\"}}> ...(read more)</Link>\r\n                    </p>\r\n                    \r\n                    <Link to={`/ques/${props.id}`} style={{textDecoration:\"none\"}}>\r\n                            <button className=\"btn btn-warning\"><img className=\"answer-img\" src={answer} style={{width:\"20%\", height:\"20%\", float: \"none\"}}></img><u style={{marginLeft:\"4%\"}}> {props.answers.length} Answers</u></button>\r\n                    </Link>                \r\n                </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Question;","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js",["118"],"import React, { useEffect, useState } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport \"./UserQuestions.css\";\r\nimport QuesList from './QuesList';\r\nimport Categories from './Categories';\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UserQuestions = () => {\r\n    const userId = useParams().userId;\r\n\r\n    // State for storing all the questions of the given category\r\n    const [userQuestions , setUserQuestions] = useState();\r\n\r\n    // State for Loading spinner & Error model\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    const [error , setError] = useState();\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    // Sending the get request\r\n    useEffect(() => {\r\n\r\n        const sendRequest = async () => {\r\n            try{\r\n                // Turning on the loading spinner\r\n                setIsLoading(true);\r\n                const response = await fetch(`http://localhost:5000/api/user/${userId}/questions`);\r\n                const responseData = await response.json();\r\n\r\n                // Throwing error comming from backend\r\n                if(responseData.message && responseData.message !== \"No questions found\"){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                // Storing the user questions in our State\r\n                setUserQuestions(responseData.questions);\r\n            }catch(err){\r\n                console.log(err);\r\n                // Setting the error in frontend\r\n                setError(err.message);\r\n            }\r\n            // Turning off the loading spinner after the data is received\r\n            setIsLoading(false);\r\n        }\r\n        sendRequest();\r\n    } , []);    \r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n\r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            {/* Showing the user questions after the data is received from backend */}\r\n            { !isLoading && (\r\n                <div className=\"home\">\r\n                    <div className=\"left\">\r\n                        <Categories />\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        { userQuestions && <QuesList allQuestions={userQuestions} /> }\r\n                        { !userQuestions && <h1>No questios of this category available</h1>}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default UserQuestions;","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js",["119"],"import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./Categories.css\";\r\n\r\nconst Categories = (props) => {\r\n\r\n    // Ctaegories state\r\n    const [categories,setCategorite]=useState([\"Arduino\",\"RPI\",\"Augmented Reality\",\"Virtual reality\",\"ROS\",\"Dron Tech\",\"my tech\"]);\r\n\r\n    // mapping all the categories into the Links\r\n    const allCategories = categories.map((category , index) => {\r\n        return (\r\n            <Link key={index} to={`/questions/${category}`} className=\"single-category\">{category}</Link>\r\n        )  \r\n    });\r\n\r\n    return(\r\n        // Showing all the categories section\r\n        <React.Fragment>\r\n            <h6 className=\"category-heading\">ALL CATEGORIES</h6>\r\n            <div className=\"categories-div\">\r\n                {allCategories}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Categories;\r\n","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js",[],"F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx",["120","121"],"import React,{useState,useContext,useReducer,useCallback} from 'react';\r\n// import {useHistory} from 'react-router-dom';\r\n\r\nimport logo from '../../photos/logo.svg';\r\nimport './SignIn.css';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from \"../../shared/components/validators\";\r\n// import {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\n// This function will be called whenever we use \"dispatch\"\r\nconst formReducer = ( state, action) => {\r\n\r\n    // Checks the action type\r\n    switch( action.type ){\r\n\r\n        case 'INPUT_CHANGE':\r\n            // Initially the form is valid\r\n            let formIsValid = true;\r\n\r\n            // Traversing through all inputs\r\n            for(const inputId in state.inputs){\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n\r\n                // Taking the Input which is chaning right now\r\n                if(inputId === action.inputId){\r\n                    // The form will only be valid if the changed \"Input\" is valid\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else{\r\n                    // Setting the default values for the rest input components\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return{\r\n                // Returning the State after the input state is changed\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId]:{\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n\r\n        // For setting the data which we pass\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs:action.inputs,\r\n                isValid:action.formIsValid\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction Authenticate(){\r\n\r\n    // Using AuthContext for user login detalis(userId)  \r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for submit button\r\n    const [onSubmit , setOnSubmit] = useState(false);\r\n\r\n    // State which display Login form when set to true\r\n    const [isLogin , setIsLogin] = useState(true);\r\n\r\n    // Initial state of form(login)  \r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n       inputs:{\r\n        email:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n        password:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n    },\r\n        isValid:false\r\n    });\r\n\r\n    // State For Loading Spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for error modal or block\r\n    const [error, setError] = useState();\r\n\r\n    // Trigers whenever input changes\r\n    const handleInput = useCallback((id , value, isValid) => {\r\n        dispatch({\r\n            type:'INPUT_CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n\r\n    },[]);\r\n\r\n    // To set the data after the switching from signup->login or visa-versa \r\n    const setData = (inputs,formIsValid) => {\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs:inputs,\r\n            formIsValid:formIsValid\r\n        })\r\n    }\r\n\r\n    // Triger when we click the \"SWITCH\" button\r\n    const handleSwitch = (event) => {\r\n\r\n        // This prevents the form to get submitted\r\n        setOnSubmit(false);\r\n\r\n        if(!isLogin){\r\n            // Signup -> Login\r\n            setData({\r\n                ...formState.inputs,\r\n                name:undefined \r\n            },\r\n            formState.inputs.email.isValid && formState.inputs)\r\n        }else{\r\n            // Login -> Signup\r\n            setData(\r\n                {\r\n                  ...formState.inputs,\r\n                  name: {\r\n                    value: '',\r\n                    isValid: false\r\n                  }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin(prevMode => !prevMode);\r\n    }\r\n\r\n    // Triggers when the form is submitted\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // If the submit button is clicked \r\n        if(onSubmit){\r\n\r\n            // If the user is Loggin in\r\n            if(isLogin){\r\n                try{\r\n                    // Showing the Loaading spinney till the data is arrived\r\n                    setIsLoading(true);\r\n\r\n                    // Getting the data from api\r\n                    const response = await fetch(\"http://localhost:5000/api/user/login\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n\r\n                    // Converting the data into json format\r\n                    const responseData = await response.json();\r\n\r\n                    // It the error is comming as a response\r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n\r\n                    // Getting userId in Frontend\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n\r\n                    // Showing the Error modal in frontend\r\n                    setError(err.message || 'Something wentt wrong, please try again');\r\n                }\r\n\r\n                // After the data is arrived the remove the loading spinner\r\n                setIsLoading(false);\r\n            }else{\r\n                try{\r\n                    setIsLoading(true);\r\n                    const response = await fetch(\"http://localhost:5000/api/user/signup\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name:formState.inputs.name.value,\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n        \r\n                    const responseData = await response.json();\r\n        \r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n                    setError(err.message || 'Something went wrong, please try again.');\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Triggered when the submit button is clicked\r\n    const haldleSubmitButton = (event) => {\r\n        event.preventDefault();\r\n        // The form shoul only be submitted now\r\n        setOnSubmit(true);\r\n        handleSubmit(event);\r\n    }\r\n\r\n    // To handle error\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )} \r\n\r\n            {/* Showing Loading Spinner till the data is arrived */}\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n                <div id=\"wrapper\">\r\n                    <div className=\"signIn-text-DIV\">\r\n                        <h1 className=\"signIN-text\">INSPIRING.</h1>\r\n                        <h1 className=\"signIN-text\">INNOVATING.</h1>\r\n                        <h1 className=\"signIN-text\">INNVENTING.</h1>\r\n                    </div>\r\n                    <div className=\"my-form\">\r\n                        <img className=\"logo2\" src={logo}/>\r\n\r\n                        {/* Authentication Form */}\r\n                        <form onSubmit={handleSubmit}>\r\n\r\n                            {/* Display \"Name\" only if it is in Signup form(!isLogin) */}\r\n                            { !isLogin && (\r\n                                <div>\r\n                                    <span className=\"icon\"><i class=\"fas fa-user\"></i></span>  \r\n                                    <Input \r\n                                        id=\"name\"\r\n                                        element=\"input\"\r\n                                        placeholder=\"User Name\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control sign-in-Box\"\r\n                                        value={formState.inputs.name.value}\r\n                                        onInput = {handleInput}\r\n                                        validators = {[VALIDATOR_REQUIRE()]}\r\n                                        errorMessage=\"Please enter a valid user name\"\r\n                                    />\r\n                                </div>\r\n                                )\r\n                            }\r\n\r\n                            {/* Email & password input components */}\r\n                            <div className=\"email-div\"> \r\n                                <span className=\"icon\"><i class=\"far fa-envelope\"></i></span>  \r\n                                <div className=\"input\">\r\n                                <Input \r\n                                    id=\"email\"\r\n                                    element=\"input\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"email form-control\"\r\n                                    value={formState.inputs.email.value}\r\n                                    onInput={handleInput}\r\n                                    validators={[VALIDATOR_EMAIL()]}\r\n                                    errorMessage=\"Please enter a valid email\"\r\n                                    >\r\n                                </Input>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <span className=\"icon password-icon\"><i class=\"fas fa-key\"></i></span>  \r\n                                <Input\r\n                                    id=\"password\"\r\n                                    element=\"input\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"password form-control\"\r\n                                    value={formState.inputs.password.value}\r\n                                    onInput={handleInput}\r\n                                    validators={[VALIDATOR_MINLENGTH(6)]}\r\n                                    errorMessage=\"Pleaase enter a password of length 6\"\r\n                                >\r\n                                </Input>\r\n                            </div>\r\n\r\n                            {/* This button will be disabled if the form is not valid */}\r\n                            <div className=\"buttons\">\r\n                                {/* This button will be disabled if the form is not valid */}\r\n                                <button className=\"btn btn-success LOGIN\" disabled={!formState.isValid} onClick={haldleSubmitButton}>{ isLogin ? \"Login\" : \"Signup\" }</button>\r\n\r\n                                {/* Switching button */}\r\n                                <a className=\"SIGNUP\" onClick={handleSwitch}>{ isLogin ? \"Sign up\" : \"Login\" }?</a>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Authenticate; ","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\QuesPage.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\ErrorModal.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateQues.js",["146"],"import React,{useState, useEffect} from 'react';\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport \"./UpdateQues.css\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UpdateQues = (props) => {\r\n\r\n    // Using useHistory hook to go to the question page after updation\r\n    const history = useHistory();\r\n\r\n    // Taking quesId from the route\r\n    const quesId = useParams().quesId;\r\n\r\n    // State for Loading Spinner and Error model\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    const [error , setError] = useState();\r\n\r\n    const [userName , setUserName] = useState();\r\n\r\n    // Form State initially it is empty because we have not sended the get request to backend\r\n    const [formState, handleInput, setFormData] =  useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false,\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false,\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    // Sending the fetcg get request to get the data of the question\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                // Turning on the loading spinner\r\n                setIsLoading(true);\r\n\r\n                // Sending get request for question\r\n                const response = await fetch(`http://localhost:5000/api/question/${quesId}`);\r\n                const responseData = await response.json();\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setUserName(responseData.question.userName);\r\n\r\n                // After getting the question data we have to update our formState\r\n                setFormData(\r\n                    {\r\n                        category:{\r\n                            value:responseData.question.category,\r\n                            isValid:true,\r\n                        },\r\n                        title:{\r\n                            value:responseData.question.title,\r\n                            isValid:true\r\n                        },\r\n                        wholeQuestion:{\r\n                            value:responseData.question.wholeQuestion,\r\n                            isValid:true,\r\n                        }\r\n                    },\r\n                    true\r\n                )\r\n            }catch(err){\r\n                console.log(err);\r\n                // Setting the error comming from backend\r\n                setError(err.message);\r\n            }\r\n\r\n            // Turning off the loading spinner\r\n            setIsLoading(false);\r\n        }\r\n        // Calling our function\r\n        sendRequest();\r\n    },[]);\r\n\r\n    // Function to handle submit\r\n    const submitHandler = async (event) => {\r\n\r\n        // Preventing the default after clicking the button\r\n        event.preventDefault();\r\n\r\n        // Sending the Patch request with old question details to update the question \r\n        try{\r\n            const response = await fetch(`http://localhost:5000/api/question/${quesId}`,{\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    title:formState.inputs.title.value,\r\n                    category:formState.inputs.category.value,\r\n                    wholeQuestion:formState.inputs.wholeQuestion.value\r\n                })\r\n            });\r\n            const responseData = await response.json();\r\n\r\n            // Sending the error if it is comming from backend\r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            // After updation we should redirect to question(QuesPage component) page\r\n            history.push(`/ques/${quesId}`);\r\n        }catch(err){\r\n            console.log(err);\r\n            // Setting the errors to show in frontend\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n\r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n\r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && userName && (\r\n                <form onSubmit={submitHandler}>\r\n\r\n                    {/* Input for title of question */}                \r\n                    <div className=\"ask-question-container\">                                \r\n                        <div className=\"user-icon\"><AccountCircleIcon className=\"user-icon\" style={{fontSize:\"3.3rem\"}}/></div>\r\n                        <h6 className=\"student-name\">{userName} • asked</h6>\r\n                        <Input \r\n                            id=\"title\"\r\n                            element=\"textarea\"\r\n                            value={formState.inputs.title.value}\r\n                            isValid={formState.inputs.title.isValid}\r\n                            isTouch={true}\r\n                            errorMessage = \"Please enter a valid title\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                            className=\"que-title-text\" \r\n                            rows=\"2\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Input for category of question*/}\r\n                    <div className=\"ask-question-container\">                                \r\n                        <h6>Add Category</h6>    \r\n                        <Input \r\n                            id=\"category\"\r\n                            element=\"input\"\r\n                            type=\"text\"\r\n                            label=\"Category\"\r\n                            value={formState.inputs.category.value}\r\n                            isValid={formState.inputs.category.isValid}\r\n                            isTouch={true}\r\n                            errorMessage=\"Please enter a category\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                            className=\"cat\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Input for wholeQuestion of question */}\r\n                    <div className=\"que-body-container\">\r\n                        <Input  \r\n                            id=\"wholeQuestion\"\r\n                            element=\"textarea\"\r\n                            value={formState.inputs.wholeQuestion.value}\r\n                            isValid={formState.inputs.wholeQuestion.isValid}\r\n                            isTouch={true}\r\n                            errorMessage=\"Question must be of 10 Characters\"\r\n                            validators={[VALIDATOR_MINLENGTH(10)]}\r\n                            onInput={handleInput}\r\n                            className=\"que-body-text\" \r\n                            rows=\"7\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* This button should be disabled if the form in invalid */}\r\n                    <button className=\"submit-btn\" disabled={!formState.isValid}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n            )}\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateQues;","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\NewQuestion.js",["147","148"],"import React,{useContext,useState,useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport \"./NewQuestion.css\";\r\nimport Input from '../../shared/components/Input';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport submit from '../../photos/submit.svg';\r\n\r\nconst NewQuestion = () => {\r\n\r\n    // For getting userId from AuthContext\r\n    const auth = useContext(AuthContext);\r\n\r\n    // For redirecting the user to \"/\" route after clicking submit button\r\n    const history = useHistory();\r\n\r\n    // For showing errors in frontend\r\n    const [error,setError] = useState();\r\n    const [isLoading , setIsLoading] = useState(false);\r\n\r\n    const [userName , setUserName] = useState();\r\n\r\n    // Form input State\r\n    const [formState, handleInput] = useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false\r\n            }\r\n        },\r\n        false\r\n    )\r\n\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                setIsLoading(true);\r\n                const response = await fetch(`http://localhost:5000/api/user/${auth.userId}`);\r\n                const responseData = await response.json();\r\n\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                setUserName(responseData.user.name);\r\n            }catch(err){\r\n                console.log(err);\r\n                setError(err);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        sendRequest();\r\n    },[])\r\n    \r\n    // This will be triggered when user will click submit button \r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Sending the POST request to create new Question\r\n        try{\r\n            const response = await fetch(\"http://localhost:5000/api/question/\",{\r\n                method:'POST',\r\n                headers:{\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body:JSON.stringify({\r\n                    userId:auth.userId,\r\n                    title:formState.inputs.title.value,\r\n                    category:formState.inputs.category.value,\r\n                    wholeQuestion:formState.inputs.wholeQuestion.value\r\n                })\r\n            });\r\n\r\n            const responseData = await response.json();\r\n\r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            // After creating the new question, redirect the user to home page(\"/\")\r\n            history.push(\"/\");\r\n        }catch(err){\r\n            console.log(err);\r\n\r\n            // Setting the error\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                    <React.Fragment>\r\n                        <Backdrop onClick={errorHandler} />\r\n                        <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                    </React.Fragment>\r\n            )}\r\n\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && userName && (\r\n                <form onSubmit={submitHandler}>\r\n\r\n                    {/* Input for title of question */}                \r\n                    <div className=\"ask-question-container\">                                \r\n                        <div className=\"user-icon\"><AccountCircleIcon className=\"user-icon\" style={{fontSize:\"3.3rem\"}}/></div>\r\n                        <h6 className=\"student-name\">{userName} • asked</h6>\r\n                        <Input \r\n                            id=\"title\"\r\n                            element=\"textarea\"\r\n                            placeholder=\"   Add description of your question here...\"                        \r\n                            errorMessage = \"Please enter a valid title\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                            className=\"que-title-text\" \r\n                            rows=\"2\"\r\n                            \r\n                        />\r\n                    </div>\r\n\r\n                    {/* Input for category of question*/}\r\n                    <div className=\"ask-question-container\">                                \r\n                        <h6>Add Category</h6>    \r\n                        <Input \r\n                            id=\"category\"\r\n                            element=\"input\"\r\n                            type=\"text\"\r\n                            label=\"Category\"\r\n                            placeholder=\"Arduino\"\r\n                            className=\"cat\"\r\n                            errorMessage=\"Please enter a category\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            onInput={handleInput}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Input for wholeQuestion of question */}\r\n                    <div className=\"que-body-container\">\r\n                        <Input  \r\n                            id=\"wholeQuestion\"\r\n                            element=\"textarea\"\r\n                            errorMessage=\"Question must be of 10 Characters\"\r\n                            validators={[VALIDATOR_MINLENGTH(10)]}\r\n                            onInput={handleInput}\r\n                            className=\"que-body-text\" \r\n                            rows=\"7\"\r\n                            placeholder=\"   Add description of your question here...\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* This button will be disabled if the formState is invalid */}\r\n                    <button className=\"submit-btn\" disabled={!formState.isValid}>\r\n                        <img className=\"submit-img\" src={submit}></img>Submit\r\n                    </button>\r\n                </form>\r\n            )}\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default NewQuestion;\r\n\r\n// {/*  */}\r\n// {/* Input for title of question */}\r\n//                 {/* <Input \r\n//                     id=\"title\"\r\n//                     element=\"textarea\"\r\n//                     label=\"Title\"\r\n//                     errorMessage = \"Please enter a valid title\"\r\n//                     validators={[VALIDATOR_REQUIRE()]}\r\n//                     onInput={handleInput}\r\n//                 /> */}\r\n//                 {/* Input for wholeQuestion of question */}\r\n//                 {/* <Input  \r\n//                     id=\"wholeQuestion\"\r\n//                     element=\"textarea\"\r\n//                     rows={5}\r\n//                     label=\"Question\"\r\n//                     errorMessage=\"Question must be of 10 Characters\"\r\n//                     validators={[VALIDATOR_MINLENGTH(10)]}\r\n//                     onInput={handleInput}\r\n//                 /> */}","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\CatQuestions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateAnswer.js",["149","150"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UserAnswers.js",["151","152"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\SavedAnswers.js",["153","154"],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":48,"column":13,"nodeType":"161","endLine":48,"endColumn":50},{"ruleId":"162","severity":1,"message":"163","line":95,"column":37,"nodeType":"161","endLine":95,"endColumn":75},{"ruleId":"155","replacedBy":"164"},{"ruleId":"157","replacedBy":"165"},{"ruleId":"162","severity":1,"message":"163","line":24,"column":65,"nodeType":"161","endLine":24,"endColumn":157},{"ruleId":"166","severity":1,"message":"167","line":52,"column":9,"nodeType":"168","endLine":52,"endColumn":11,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":8,"column":23,"nodeType":"172","messageId":"173","endLine":8,"endColumn":36},{"ruleId":"162","severity":1,"message":"163","line":255,"column":25,"nodeType":"161","endLine":255,"endColumn":60},{"ruleId":"159","severity":1,"message":"174","line":321,"column":33,"nodeType":"161","endLine":321,"endColumn":78},{"ruleId":"170","severity":1,"message":"175","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":22},{"ruleId":"166","severity":1,"message":"176","line":166,"column":7,"nodeType":"168","endLine":166,"endColumn":21,"suggestions":"177"},{"ruleId":"162","severity":1,"message":"163","line":366,"column":136,"nodeType":"161","endLine":366,"endColumn":174},{"ruleId":"162","severity":1,"message":"163","line":368,"column":96,"nodeType":"161","endLine":368,"endColumn":137},{"ruleId":"162","severity":1,"message":"163","line":385,"column":37,"nodeType":"161","endLine":385,"endColumn":79},{"ruleId":"162","severity":1,"message":"163","line":390,"column":90,"nodeType":"161","endLine":390,"endColumn":132},{"ruleId":"162","severity":1,"message":"163","line":400,"column":72,"nodeType":"161","endLine":400,"endColumn":109},{"ruleId":"178","severity":1,"message":"179","line":415,"column":53,"nodeType":"180","messageId":"181","endLine":415,"endColumn":55},{"ruleId":"162","severity":1,"message":"163","line":425,"column":61,"nodeType":"161","endLine":425,"endColumn":99},{"ruleId":"162","severity":1,"message":"163","line":429,"column":65,"nodeType":"161","endLine":429,"endColumn":106},{"ruleId":"162","severity":1,"message":"163","line":440,"column":61,"nodeType":"161","endLine":440,"endColumn":98},{"ruleId":"162","severity":1,"message":"163","line":446,"column":61,"nodeType":"161","endLine":446,"endColumn":98},{"ruleId":"162","severity":1,"message":"163","line":454,"column":86,"nodeType":"161","endLine":454,"endColumn":129},{"ruleId":"162","severity":1,"message":"163","line":466,"column":106,"nodeType":"161","endLine":466,"endColumn":149},{"ruleId":"162","severity":1,"message":"163","line":496,"column":100,"nodeType":"161","endLine":496,"endColumn":137},{"ruleId":"162","severity":1,"message":"163","line":510,"column":158,"nodeType":"161","endLine":510,"endColumn":196},{"ruleId":"162","severity":1,"message":"163","line":512,"column":120,"nodeType":"161","endLine":512,"endColumn":161},{"ruleId":"162","severity":1,"message":"163","line":521,"column":182,"nodeType":"161","endLine":521,"endColumn":219},{"ruleId":"162","severity":1,"message":"163","line":526,"column":61,"nodeType":"161","endLine":526,"endColumn":98},{"ruleId":"162","severity":1,"message":"163","line":534,"column":86,"nodeType":"161","endLine":534,"endColumn":129},{"ruleId":"162","severity":1,"message":"163","line":546,"column":106,"nodeType":"161","endLine":546,"endColumn":149},{"ruleId":"162","severity":1,"message":"163","line":574,"column":100,"nodeType":"161","endLine":574,"endColumn":137},{"ruleId":"162","severity":1,"message":"163","line":591,"column":98,"nodeType":"161","endLine":591,"endColumn":144},{"ruleId":"162","severity":1,"message":"163","line":598,"column":91,"nodeType":"161","endLine":598,"endColumn":137},{"ruleId":"166","severity":1,"message":"182","line":91,"column":7,"nodeType":"168","endLine":91,"endColumn":9,"suggestions":"183"},{"ruleId":"166","severity":1,"message":"184","line":67,"column":7,"nodeType":"168","endLine":67,"endColumn":9,"suggestions":"185"},{"ruleId":"162","severity":1,"message":"163","line":174,"column":25,"nodeType":"161","endLine":174,"endColumn":66},{"ruleId":"170","severity":1,"message":"186","line":5,"column":27,"nodeType":"172","messageId":"173","endLine":5,"endColumn":46},{"ruleId":"166","severity":1,"message":"187","line":70,"column":7,"nodeType":"168","endLine":70,"endColumn":9,"suggestions":"188"},{"ruleId":"166","severity":1,"message":"167","line":56,"column":9,"nodeType":"168","endLine":56,"endColumn":11,"suggestions":"189"},{"ruleId":"162","severity":1,"message":"163","line":91,"column":85,"nodeType":"161","endLine":91,"endColumn":128},{"ruleId":"166","severity":1,"message":"167","line":56,"column":9,"nodeType":"168","endLine":56,"endColumn":11,"suggestions":"190"},{"ruleId":"162","severity":1,"message":"163","line":91,"column":85,"nodeType":"161","endLine":91,"endColumn":128},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["191"],["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["193"],"no-unused-vars","'setCategorite' is assigned a value but never used.","Identifier","unusedVar","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'StarBorderIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'quesId'. Either include it or remove the dependency array.",["194"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'quesId' and 'setFormData'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'auth.userId'. Either include it or remove the dependency array.",["196"],"'VALIDATOR_MINLENGTH' is defined but never used.","React Hook useEffect has missing dependencies: 'answerId' and 'setFormData'. Either include them or remove the dependency array.",["197"],["198"],["199"],"no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"200","fix":"210"},{"desc":"200","fix":"211"},"Update the dependencies array to be: [userId]",{"range":"212","text":"213"},"Update the dependencies array to be: [quesId, submitAnswer]",{"range":"214","text":"215"},"Update the dependencies array to be: [quesId, setFormData]",{"range":"216","text":"217"},"Update the dependencies array to be: [auth.userId]",{"range":"218","text":"219"},"Update the dependencies array to be: [answerId, setFormData]",{"range":"220","text":"221"},{"range":"222","text":"213"},{"range":"223","text":"213"},[1944,1946],"[userId]",[6331,6345],"[quesId, submitAnswer]",[3261,3263],"[quesId, setFormData]",[2217,2219],"[auth.userId]",[2539,2541],"[answerId, setFormData]",[2078,2080],[2091,2093]]