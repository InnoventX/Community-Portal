[{"F:\\InnoventX\\Website\\portal\\src\\index.js":"1","F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js":"2","F:\\InnoventX\\Website\\portal\\src\\App.js":"3","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx":"4","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js":"5","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx":"6","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js":"7","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js":"8","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js":"9","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js":"10","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js":"11","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js":"12","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js":"13","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js":"14","F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx":"15","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js":"16","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js":"17","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\QuesPage.js":"18","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\ErrorModal.js":"19","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateQues.js":"20","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\NewQuestion.js":"21","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\CatQuestions.js":"22","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateAnswer.js":"23","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UserAnswers.js":"24"},{"size":500,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":3406,"mtime":1616407948046,"results":"28","hashOfConfig":"26"},{"size":4113,"mtime":1616407562790,"results":"29","hashOfConfig":"26"},{"size":3472,"mtime":1608361033235,"results":"30","hashOfConfig":"26"},{"size":3605,"mtime":1616138074715,"results":"31","hashOfConfig":"26"},{"size":1478,"mtime":1616403246807,"results":"32","hashOfConfig":"26"},{"size":1081,"mtime":1616403126308,"results":"33","hashOfConfig":"26"},{"size":3038,"mtime":1616408033230,"results":"34","hashOfConfig":"26"},{"size":2217,"mtime":1608616844621,"results":"35","hashOfConfig":"26"},{"size":1710,"mtime":1608301980207,"results":"36","hashOfConfig":"26"},{"size":888,"mtime":1616145004754,"results":"37","hashOfConfig":"26"},{"size":197,"mtime":1615636566217,"results":"38","hashOfConfig":"26"},{"size":1506,"mtime":1608375686295,"results":"39","hashOfConfig":"26"},{"size":10601,"mtime":1616134512520,"results":"40","hashOfConfig":"26"},{"size":286,"mtime":1615919796867,"results":"41","hashOfConfig":"26"},{"size":300,"mtime":1615919796865,"results":"42","hashOfConfig":"26"},{"size":19157,"mtime":1616404566802,"results":"43","hashOfConfig":"26"},{"size":420,"mtime":1616262890234,"results":"44","hashOfConfig":"26"},{"size":7227,"mtime":1616144789929,"results":"45","hashOfConfig":"26"},{"size":4475,"mtime":1616137005299,"results":"46","hashOfConfig":"26"},{"size":3268,"mtime":1616158203381,"results":"47","hashOfConfig":"26"},{"size":5343,"mtime":1616406943392,"results":"48","hashOfConfig":"26"},{"size":3687,"mtime":1616416251975,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"suyroj",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\InnoventX\\Website\\portal\\src\\index.js",[],["103","104"],"F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js",[],"F:\\InnoventX\\Website\\portal\\src\\App.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx",["105","106"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js",[],["107","108"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js",["109"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js",["110"],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js",["111"],"import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./Categories.css\";\r\n\r\nconst Categories = (props) => {\r\n\r\n    // Ctaegories state\r\n    const [categories,setCategorite]=useState([\"Arduino\",\"RPI\",\"Augmented Reality\",\"Virtual reality\",\"ROS\",\"Dron Tech\",\"my tech\"]);\r\n\r\n    // mapping all the categories into the Links\r\n    const allCategories = categories.map((category , index) => {\r\n        return (\r\n            <Link key={index} to={`/questions/${category}`} className=\"single-category\">{category}</Link>\r\n        )  \r\n    });\r\n\r\n    return(\r\n        // Showing all the categories section\r\n        <React.Fragment>\r\n            <h6 className=\"category-heading\">ALL CATEGORIES</h6>\r\n            <div className=\"categories-div\">\r\n                {allCategories}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Categories;\r\n","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js",[],"F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx",["112"],"import React,{useState,useContext,useReducer,useCallback} from 'react';\r\n// import {useHistory} from 'react-router-dom';\r\n\r\nimport \"./Authenticate.css\";\r\nimport logo from '../../photos/logo.png';\r\nimport './SignIn.css';\r\nimport {AuthContext} from \"../../shared/context/AuthContext\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from \"../../shared/components/validators\";\r\n// import {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\n// This function will be called whenever we use \"dispatch\"\r\nconst formReducer = ( state, action) => {\r\n\r\n    // Checks the action type\r\n    switch( action.type ){\r\n\r\n        case 'INPUT_CHANGE':\r\n            // Initially the form is valid\r\n            let formIsValid = true;\r\n\r\n            // Traversing through all inputs\r\n            for(const inputId in state.inputs){\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n\r\n                // Taking the Input which is chaning right now\r\n                if(inputId === action.inputId){\r\n                    // The form will only be valid if the changed \"Input\" is valid\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else{\r\n                    // Setting the default values for the rest input components\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return{\r\n                // Returning the State after the input state is changed\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId]:{\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n\r\n        // For setting the data which we pass\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs:action.inputs,\r\n                isValid:action.formIsValid\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction Authenticate(){\r\n\r\n    // Using AuthContext for user login detalis(userId)  \r\n    const auth = useContext(AuthContext);\r\n\r\n    // State for submit button\r\n    const [onSubmit , setOnSubmit] = useState(false);\r\n\r\n    // State which display Login form when set to true\r\n    const [isLogin , setIsLogin] = useState(true);\r\n\r\n    // Initial state of form(login)  \r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n       inputs:{\r\n        email:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n        password:{\r\n            value:\"\",\r\n            isValid:false\r\n        },\r\n    },\r\n        isValid:false\r\n    });\r\n\r\n    // State For Loading Spinner\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    \r\n    // State for error modal or block\r\n    const [error, setError] = useState();\r\n\r\n    // Trigers whenever input changes\r\n    const handleInput = useCallback((id , value, isValid) => {\r\n        dispatch({\r\n            type:'INPUT_CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n\r\n    },[]);\r\n\r\n    // To set the data after the switching from signup->login or visa-versa \r\n    const setData = (inputs,formIsValid) => {\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs:inputs,\r\n            formIsValid:formIsValid\r\n        })\r\n    }\r\n\r\n    // Triger when we click the \"SWITCH\" button\r\n    const handleSwitch = (event) => {\r\n\r\n        // This prevents the form to get submitted\r\n        setOnSubmit(false);\r\n\r\n        if(!isLogin){\r\n            // Signup -> Login\r\n            setData({\r\n                ...formState.inputs,\r\n                name:undefined \r\n            },\r\n            formState.inputs.email.isValid && formState.inputs)\r\n        }else{\r\n            // Login -> Signup\r\n            setData(\r\n                {\r\n                  ...formState.inputs,\r\n                  name: {\r\n                    value: '',\r\n                    isValid: false\r\n                  }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin(prevMode => !prevMode);\r\n    }\r\n\r\n    // Triggers when the form is submitted\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // If the submit button is clicked \r\n        if(onSubmit){\r\n\r\n            // If the user is Loggin in\r\n            if(isLogin){\r\n                try{\r\n                    // Showing the Loaading spinney till the data is arrived\r\n                    setIsLoading(true);\r\n\r\n                    // Getting the data from api\r\n                    const response = await fetch(\"http://localhost:5000/api/user/login\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n\r\n                    // Converting the data into json format\r\n                    const responseData = await response.json();\r\n\r\n                    // It the error is comming as a response\r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n\r\n                    // Getting userId in Frontend\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n\r\n                    // Showing the Error modal in frontend\r\n                    setError(err.message || 'Something wentt wrong, please try again');\r\n                }\r\n\r\n                // After the data is arrived the remove the loading spinner\r\n                setIsLoading(false);\r\n            }else{\r\n                try{\r\n                    setIsLoading(true);\r\n                    const response = await fetch(\"http://localhost:5000/api/user/signup\",{\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            name:formState.inputs.name.value,\r\n                            email:formState.inputs.email.value,\r\n                            password:formState.inputs.password.value\r\n                        })\r\n                    });\r\n        \r\n                    const responseData = await response.json();\r\n        \r\n                    if(responseData.message){\r\n                        throw Error(responseData.message);\r\n                    }\r\n\r\n                    auth.login(responseData.user.id);\r\n                }catch(err){\r\n                    console.log(err);\r\n                    setError(err.message || 'Something went wrong, please try again.');\r\n                }\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Triggered when the submit button is clicked\r\n    const haldleSubmitButton = (event) => {\r\n        event.preventDefault();\r\n        // The form shoul only be submitted now\r\n        setOnSubmit(true);\r\n        handleSubmit(event);\r\n    }\r\n\r\n    // To handle error\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )} \r\n\r\n            {/* Showing Loading Spinner till the data is arrived */}\r\n            { isLoading && <LoadingSpinner asOverlay />}\r\n            \r\n            <div className=\"my-form\">\r\n                <img className=\"logo2\" src={logo}/>\r\n\r\n                {/* Authentication Form */}\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                    {/* Display \"Name\" only if it is in Signup form(!isLogin) */}\r\n                    { !isLogin && (<Input \r\n                        id=\"name\"\r\n                        element=\"input\"\r\n                        placeholder=\"Use Name\"\r\n                        type=\"text\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.name.value}\r\n                        onInput = {handleInput}\r\n                        validators = {[VALIDATOR_REQUIRE()]}\r\n                        errorMessage=\"Please enter a valid user name\"\r\n                    />)\r\n                    }\r\n\r\n                    {/* Email & password input components */}\r\n                    <Input \r\n                        id=\"email\"\r\n                        element=\"input\"\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.email.value}\r\n                        onInput={handleInput}\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorMessage=\"Please enter a valid email\"\r\n                    />\r\n                    <Input\r\n                        id=\"password\"\r\n                        element=\"input\"\r\n                        type=\"password\"\r\n                        placeholder=\"password\"\r\n                        className=\"sign-in\"\r\n                        value={formState.inputs.password.value}\r\n                        onInput={handleInput}\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorMessage=\"Pleaase enter a password of length 6\"\r\n                    />\r\n\r\n                    {/* This button will be disabled if the form is not valid */}\r\n                    <button disabled={!formState.isValid} onClick={haldleSubmitButton}>{ isLogin ? \"Login\" : \"Signup\" }</button>\r\n\r\n                    {/* Switching button */}\r\n                    <button onClick={handleSwitch}>Switch to { isLogin ? \"Signup\" : \"Login\" }</button>\r\n                </form>\r\n            </div>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Authenticate; ","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\QuesPage.js",["113","114"],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\ErrorModal.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateQues.js",["115"],"import React,{useState, useEffect} from 'react';\r\nimport {useParams, useHistory} from 'react-router-dom';\r\n\r\nimport \"./UpdateQues.css\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport Backdrop from \"../../shared/components/UIElements/Backdrop\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UpdateQues = (props) => {\r\n\r\n    // Using useHistory hook to go to the question page after updation\r\n    const history = useHistory();\r\n\r\n    // Taking quesId from the route\r\n    const quesId = useParams().quesId;\r\n\r\n    // State for Loading Spinner and Error model\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    const [error , setError] = useState();\r\n\r\n    // Form State initially it is empty because we have not sended the get request to backend\r\n    const [formState, handleInput, setFormData] =  useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false,\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false,\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    // Sending the fetcg get request to get the data of the question\r\n    useEffect(() => {\r\n        const sendRequest = async () => {\r\n            try{\r\n                // Turning on the loading spinner\r\n                setIsLoading(true);\r\n\r\n                // Sending get request for question\r\n                const response = await fetch(`http://localhost:5000/api/question/${quesId}`);\r\n                const responseData = await response.json();\r\n                if(responseData.message){\r\n                    throw new Error(responseData.message);\r\n                }\r\n\r\n                // After getting the question data we have to update our formState\r\n                setFormData(\r\n                    {\r\n                        category:{\r\n                            value:responseData.question.category,\r\n                            isValid:true,\r\n                        },\r\n                        title:{\r\n                            value:responseData.question.title,\r\n                            isValid:true\r\n                        },\r\n                        wholeQuestion:{\r\n                            value:responseData.question.wholeQuestion,\r\n                            isValid:true,\r\n                        }\r\n                    },\r\n                    true\r\n                )\r\n            }catch(err){\r\n                console.log(err);\r\n                // Setting the error comming from backend\r\n                setError(err.message);\r\n            }\r\n\r\n            // Turning off the loading spinner\r\n            setIsLoading(false);\r\n        }\r\n        // Calling our function\r\n        sendRequest();\r\n    },[]);\r\n\r\n    // Function to handle submit\r\n    const submitHandler = async (event) => {\r\n\r\n        // Preventing the default after clicking the button\r\n        event.preventDefault();\r\n\r\n        // Sending the Patch request with old question details to update the question \r\n        try{\r\n            const response = await fetch(`http://localhost:5000/api/question/${quesId}`,{\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    title:formState.inputs.title.value,\r\n                    category:formState.inputs.category.value,\r\n                    wholeQuestion:formState.inputs.wholeQuestion.value\r\n                })\r\n            });\r\n            const responseData = await response.json();\r\n\r\n            // Sending the error if it is comming from backend\r\n            if(responseData.message){\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            // After updation we should redirect to question(QuesPage component) page\r\n            history.push(`/ques/${quesId}`);\r\n        }catch(err){\r\n            console.log(err);\r\n            // Setting the errors to show in frontend\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    // Setting error to null after we click the screen\r\n    const errorHandler = () => {\r\n        setError(null);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n\r\n            {/* Showing error if occured */}\r\n            {error && (\r\n                <React.Fragment>\r\n                    <Backdrop onClick={errorHandler} />\r\n                    <ErrorModal heading=\"Error Occured!\" error={error} />\r\n                </React.Fragment>\r\n            )}\r\n\r\n            {/* Showing Loading spinner */}\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n\r\n            { !isLoading && (\r\n                <form onSubmit={submitHandler}>\r\n                    {/* Taking category of question as input */}\r\n                    <Input \r\n                        id=\"category\"\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        label=\"Category\"\r\n                        value={formState.inputs.category.value}\r\n                        isValid={formState.inputs.category.isValid}\r\n                        isTouch={true}\r\n                        errorMessage=\"Please enter a category\"\r\n                        validators={[VALIDATOR_REQUIRE()]}\r\n                        onInput={handleInput}\r\n                    />\r\n\r\n                    {/* Taking title of question as input */}\r\n                    <Input \r\n                        id=\"title\"\r\n                        element=\"textarea\"\r\n                        label=\"Title\"\r\n                        value={formState.inputs.title.value}\r\n                        isValid={formState.inputs.title.isValid}\r\n                        isTouch={true}\r\n                        errorMessage = \"Please enter a valid title\"\r\n                        validators={[VALIDATOR_REQUIRE()]}\r\n                        onInput={handleInput}\r\n                    />\r\n\r\n                    {/* Taking wholeQuestion of question as input */}\r\n                    <Input  \r\n                        id=\"wholeQuestion\"\r\n                        element=\"textarea\"\r\n                        rows={5}\r\n                        label=\"Question\"\r\n                        value={formState.inputs.wholeQuestion.value}\r\n                        isValid={formState.inputs.wholeQuestion.isValid}\r\n                        isTouch={true}\r\n                        errorMessage=\"Question must be of 10 Characters\"\r\n                        validators={[VALIDATOR_MINLENGTH(10)]}\r\n                        onInput={handleInput}\r\n                    />\r\n\r\n                    {/* This button should be disabled if the form in invalid */}\r\n                    <button disabled={!formState.isValid}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n            )}\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateQues;","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\NewQuestion.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\CatQuestions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UpdateAnswer.js",["116","117"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\UserAnswers.js",["118"],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":29,"column":13,"nodeType":"125","endLine":29,"endColumn":50},{"ruleId":"126","severity":1,"message":"127","line":72,"column":37,"nodeType":"125","endLine":72,"endColumn":75},{"ruleId":"119","replacedBy":"128"},{"ruleId":"121","replacedBy":"129"},{"ruleId":"126","severity":1,"message":"127","line":24,"column":65,"nodeType":"125","endLine":24,"endColumn":157},{"ruleId":"130","severity":1,"message":"131","line":52,"column":9,"nodeType":"132","endLine":52,"endColumn":11,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":8,"column":23,"nodeType":"136","messageId":"137","endLine":8,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":251,"column":17,"nodeType":"125","endLine":251,"endColumn":52},{"ruleId":"130","severity":1,"message":"138","line":118,"column":7,"nodeType":"132","endLine":118,"endColumn":21,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":291,"column":61,"nodeType":"142","messageId":"143","endLine":291,"endColumn":63},{"ruleId":"130","severity":1,"message":"144","line":86,"column":7,"nodeType":"132","endLine":86,"endColumn":9,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"146","line":5,"column":27,"nodeType":"136","messageId":"137","endLine":5,"endColumn":46},{"ruleId":"130","severity":1,"message":"147","line":70,"column":7,"nodeType":"132","endLine":70,"endColumn":9,"suggestions":"148"},{"ruleId":"130","severity":1,"message":"131","line":53,"column":9,"nodeType":"132","endLine":53,"endColumn":11,"suggestions":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["150"],["151"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["152"],"no-unused-vars","'setCategorite' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'quesId'. Either include it or remove the dependency array.",["153"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'quesId' and 'setFormData'. Either include them or remove the dependency array.",["154"],"'VALIDATOR_MINLENGTH' is defined but never used.","React Hook useEffect has missing dependencies: 'answerId' and 'setFormData'. Either include them or remove the dependency array.",["155"],["156"],"no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"157","fix":"165"},"Update the dependencies array to be: [userId]",{"range":"166","text":"167"},"Update the dependencies array to be: [quesId, submitAnswer]",{"range":"168","text":"169"},"Update the dependencies array to be: [quesId, setFormData]",{"range":"170","text":"171"},"Update the dependencies array to be: [answerId, setFormData]",{"range":"172","text":"173"},{"range":"174","text":"167"},[1944,1946],"[userId]",[4407,4421],"[quesId, submitAnswer]",[3078,3080],"[quesId, setFormData]",[2537,2539],"[answerId, setFormData]",[1901,1903]]