[{"F:\\InnoventX\\Website\\portal\\src\\index.js":"1","F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js":"2","F:\\InnoventX\\Website\\portal\\src\\App.js":"3","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx":"4","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js":"5","F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx":"6","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesPage.js":"7","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js":"8","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js":"9","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js":"10","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\NewQuestion.js":"11","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js":"12","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js":"13","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\CatQuestions.js":"14","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js":"15","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js":"16","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UpdateQues.js":"17","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js":"18","F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx":"19","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js":"20","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":2991,"mtime":1615878567466,"results":"25","hashOfConfig":"23"},{"size":3695,"mtime":1608367649199,"results":"26","hashOfConfig":"23"},{"size":3472,"mtime":1608361033235,"results":"27","hashOfConfig":"23"},{"size":2881,"mtime":1615923407472,"results":"28","hashOfConfig":"23"},{"size":5176,"mtime":1615627493068,"results":"29","hashOfConfig":"23"},{"size":807,"mtime":1608369776848,"results":"30","hashOfConfig":"23"},{"size":922,"mtime":1615923707174,"results":"31","hashOfConfig":"23"},{"size":548,"mtime":1608361233563,"results":"32","hashOfConfig":"23"},{"size":1981,"mtime":1608376611462,"results":"33","hashOfConfig":"23"},{"size":2217,"mtime":1608616844621,"results":"34","hashOfConfig":"23"},{"size":1710,"mtime":1608301980207,"results":"35","hashOfConfig":"23"},{"size":764,"mtime":1608367104470,"results":"36","hashOfConfig":"23"},{"size":744,"mtime":1615628802411,"results":"37","hashOfConfig":"23"},{"size":197,"mtime":1615636566217,"results":"38","hashOfConfig":"23"},{"size":4255,"mtime":1608376193598,"results":"39","hashOfConfig":"23"},{"size":1506,"mtime":1608375686295,"results":"40","hashOfConfig":"23"},{"size":10445,"mtime":1615919796868,"results":"41","hashOfConfig":"23"},{"size":286,"mtime":1615919796867,"results":"42","hashOfConfig":"23"},{"size":300,"mtime":1615919796865,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"suyroj",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"F:\\InnoventX\\Website\\portal\\src\\index.js",[],["94","95"],"F:\\InnoventX\\Website\\portal\\src\\reportWebVitals.js",[],"F:\\InnoventX\\Website\\portal\\src\\App.js",["96"],"import React,{useState , useCallback} from 'react';\nimport { BrowserRouter as Router, Switch , Route, Redirect} from 'react-router-dom';\n\nimport './App.css';\nimport Authenticate from \"./user/components/Authenticate\";\nimport PortalNavbar from './shared/components/PortalNavbar';\nimport PortalHome from \"./portal home/pages/PortalHome\";\nimport QuesPage from \"./portal home/components/QuesPage\";\nimport CatQuestions from \"./portal home/components/CatQuestions\";\nimport UserQuestions from \"./portal home/components/UserQuestions\";\nimport NewQuestion from \"./portal home/components/NewQuestion\";\nimport {AuthContext} from \"./shared/context/AuthContext\";\nimport UpdateQues from \"./portal home/components/UpdateQues\";\n\nfunction App() {\n\n  // State for Login\n  const [isLogedIn, setIsLogedIn] = useState(false);\n\n  // Staate for userId comming from BACKEND\n  const [userId , setUserId] = useState(null);\n\n  const login = useCallback((userId) => {\n    setIsLogedIn(true);\n    setUserId(userId);\n  },[]);\n\n  const logout = useCallback((userId) => {\n    setIsLogedIn(false);\n    setUserId(null);\n  },[]);\n\n  let routes;\n\n  if(!isLogedIn){\n    routes = (\n      <Switch>\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalHome />\n          </Route>\n\n          {/*  User Authentication  */}\n          <Route path=\"/authenticate\" exact>      \n            <Authenticate />\n          </Route>\n\n          {/*  Question ( Single Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <QuesPage />\n          </Route>\n\n          {/*  Questions According to the Category  */}\n          <Route path=\"/questions/:catID\" exact>\n            <CatQuestions />\n          </Route>\n\n          <Redirect to=\"/\" /> \n      </Switch>\n    )\n  }\n  else{\n    routes = (\n      <Switch>\n\n          {/*  Home Page  */}\n          <Route path=\"/\" exact>\n            <PortalHome />\n          </Route>\n\n          {/*  Question ( Add New Question)  */}\n          <Route path = \"/question/new\" exact>\n            <NewQuestion />\n          </Route>\n\n          {/*  Question ( Single Question Page )  */}\n          <Route path=\"/ques/:quesID\" exact>\n            <QuesPage />\n          </Route>\n\n          {/*  Question ( According to the Category )  */}\n          <Route path=\"/questions/:catID\" exact>\n            <CatQuestions />\n          </Route>\n\n          {/*  Question ( Update Question )  */}\n          <Route path=\"/:quesId/update\" exact>\n            <UpdateQues />\n          </Route>\n\n          {/*  User ( Questions asked By User )  */}\n          <Route path=\"/:userId/questions\" exact>\n            <UserQuestions />\n          </Route>\n\n          <Redirect to=\"/\" />\n        </Switch>\n    )\n  }\n\n\n  return (\n    <AuthContext.Provider value={{\n      isLogedIn:isLogedIn,\n      login:login,\n      logout:logout\n    }}>\n      <Router>\n        <main>\n          <PortalNavbar />\n          {routes}   \n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\PortalNavbar.jsx",["97","98"],"import React,{useState,useContext} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nimport logo from '../../photos/logo.png';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport \"./PortalNavbar.css\";\r\nimport {AuthContext} from '../../shared/context/AuthContext';\r\n\r\nfunction PortalNavbar(){\r\n\r\n    const [search,setSearch] = useState(\"\");\r\n    const auth = useContext(AuthContext);\r\n\r\n    function handleSearch(event){\r\n        const ipValue = event.target.value;\r\n        setSearch(ipValue);\r\n    }\r\n\r\n    function handleClick(){\r\n        alert(\"Search: \" + search);\r\n        setSearch(\"\");\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n                <a className=\"navbar-brand\" href=\"#\"><img className=\"logo\" src={logo} />InnoventX</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/\" className=\"nav-link\" style={{color:\"white\"}}>Home</NavLink>\r\n                        </li>\r\n\r\n                        { !auth.isLogedIn && (  \r\n                            <li className=\"nav-item\">\r\n                                <div className=\"portal-div\">\r\n                                    <NavLink to=\"/authenticate\" className=\"nav-link\"><p className=\"portal-link\">Portal</p></NavLink>\r\n                                </div>\r\n                            </li>\r\n                            )\r\n                        }\r\n\r\n                        { auth.isLogedIn && ( \r\n                            <React.Fragment>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to={`/userid/question`} className=\"nav-link\" style={{color:\"white\"}}>My Ques</NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <form className=\"form-inline my-2 my-lg-0\">\r\n                                    <div className=\"button-in\">\r\n                                        <input  className=\"search\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={handleSearch}/>\r\n                                        <button className=\"search-btn\" onClick={handleClick}><SearchIcon style={{color:\"white\"}}/></button>\r\n                                    </div>\r\n                                </form>\r\n                            </li>\r\n                            \r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/question/new\">\r\n                                    <div className=\"ask-div\">ASK</div>\r\n                                </NavLink>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/\" className=\"nav-link\"><AccountCircleIcon style={{color:\"#4CD9D9\",fontSize:\"2.3rem\",marginLeft:\"0\"}} /></NavLink>\r\n                            </li>\r\n                            </React.Fragment>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PortalNavbar;\r\n\r\n","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\questions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\pages\\PortalHome.jsx",["99"],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesPage.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Question.js",["100"],"import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport \"./Question.css\";\r\n\r\n\r\nconst Question = (props) => {\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Link to={`/ques/${props.id}`} style={{textDecoration:\"none\"}}>\r\n                <div className=\"question-container\">\r\n                    <AccountCircleIcon className=\"user-icon\" style={{fontSize:\"1.8rem\"}}/>\r\n                    <h6 className=\"student-name\">{props.studentName}</h6>\r\n                    <h4 className=\"question-title\">{props.title}</h4>\r\n                    <p>{props.wholeQuestion.substring(0,100) + '...'}</p>\r\n                </div>\r\n            </Link>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Question;","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\QuesList.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UserQuestions.js",["101"],"import React,{useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport myQuestions from './questions';\r\n\r\nconst UserQuestions = () => {\r\n    const userId = useParams().userId;\r\n\r\n    const userQuestions = myQuestions.find((ques) => {\r\n        return ques.studentName === userId;\r\n    });\r\n\r\n    if(!userQuestions){\r\n        return(\r\n            <h1>No Questions</h1>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            {userQuestions}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UserQuestions;","F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\NewQuestion.js",["102","103"],"import React,{useCallback, useReducer} from 'react';\r\nimport Input from '../../shared/components/Input';\r\n\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\n\r\n\r\nconst NewQuestion = () => {\r\n\r\n\r\n    const [formState, handleInput] = useForm(\r\n        {\r\n            category:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            title:{\r\n                value:'',\r\n                isValid:false\r\n            },\r\n            wholeQuestion:{\r\n                value:'',\r\n                isValid:false\r\n            }\r\n        },\r\n        false\r\n    )\r\n    \r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(formState.inputs);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={submitHandler}>\r\n            <Input \r\n                id=\"category\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Category\"\r\n                placeholder=\"Arduino\"\r\n                errorMessage=\"Please enter a category\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input \r\n                id=\"title\"\r\n                element=\"textarea\"\r\n                label=\"Title\"\r\n                errorMessage = \"Please enter a valid title\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input  \r\n                id=\"wholeQuestion\"\r\n                element=\"textarea\"\r\n                rows={5}\r\n                label=\"Question\"\r\n                errorMessage=\"Question must be of 10 Characters\"\r\n                validators={[VALIDATOR_MINLENGTH(10)]}\r\n                onInput={handleInput}\r\n            />\r\n            <button disabled={!formState.isValid}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewQuestion;","F:\\InnoventX\\Website\\portal\\src\\shared\\components\\Input.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\validators.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\CatQuestions.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\Categories.js",["104"],"import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./Categories.css\";\r\n\r\nconst Categories = (props) => {\r\n\r\n    const [categories,setCategorite]=useState([\"Arduino\",\"RPI\",\"Augmented Reality\",\"Virtual reality\",\"ROS\",\"Dron Tech\",\"my tech\"]);\r\n\r\n    const allCategories = categories.map((category) => {\r\n        return (\r\n            <Link to={`/questions/${category}`} className=\"single-category\">{category}</Link>\r\n        )  \r\n    });\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <h6 className=\"category-heading\">ALL CATEGORIES</h6>\r\n            <div className=\"categories-div\">\r\n                {allCategories}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Categories;","F:\\InnoventX\\Website\\portal\\src\\shared\\context\\AuthContext.js",[],"F:\\InnoventX\\Website\\portal\\src\\portal home\\components\\UpdateQues.js",["105","106","107","108"],"import React,{useState,useReducer,useCallback} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nimport myQuestions from \"./questions\";\r\nimport {VALIDATOR_REQUIRE,VALIDATOR_MINLENGTH} from \"../../shared/components/validators\";\r\nimport Input from \"../../shared/components/Input\";\r\nimport {useForm} from \"../../shared/hoocks/form-hook\";\r\n\r\n/*\r\nconst formReducer = (state,action) => {\r\n    switch(action.type){\r\n        case 'INPUT-CHANGE':\r\n            let formIsValid = true;\r\n            for(const inputId in state.inputs){\r\n                if(inputId === action.inputIdId){\r\n                    formIsValid = formIsValid && action.isValid\r\n                }else{\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid\r\n                }\r\n            }\r\n\r\n            return{\r\n                ...state,\r\n                inputs:{\r\n                    ...state.inputs,\r\n                    [action.inputId] : {\r\n                        value:action.value,\r\n                        isValid:action.isValid\r\n                    }\r\n                },\r\n                isValid:formIsValid\r\n            }\r\n        \r\n            default:\r\n                return state\r\n    }\r\n}\r\n*/\r\n\r\n\r\nconst UpdateQues = (props) => {\r\n    const quesId = useParams().quesId;\r\n\r\n    const myQuestion = myQuestions.find((ques) => {\r\n        return ques.id ===quesId;\r\n    });\r\n\r\n    /*\r\n    const [formState, dispatch] = useReducer(formReducer,{\r\n        inputs:{\r\n            category:{\r\n                value:myQuestion.category,\r\n                isValid:true,\r\n            },\r\n            title:{\r\n                value:myQuestion.title,\r\n                isValid:true\r\n            },\r\n            wholeQuestion:{\r\n                value:myQuestion.wholeQuestion,\r\n                isValid:true,\r\n            }\r\n        },\r\n        isValid:true\r\n    });\r\n\r\n    const handleInput = useCallback((id,value,isValid) => {\r\n        dispatch({\r\n            type:'INPUT-CHANGE',\r\n            value:value,\r\n            isValid:isValid,\r\n            inputId:id\r\n        });\r\n    },[])\r\n    */\r\n\r\n   const [formState, handleInput, setFormData] =  useForm(\r\n    {\r\n        category:{\r\n            value:myQuestion.category,\r\n            isValid:true,\r\n        },\r\n        title:{\r\n            value:myQuestion.title,\r\n            isValid:true\r\n        },\r\n        wholeQuestion:{\r\n            value:myQuestion.wholeQuestion,\r\n            isValid:true,\r\n        }\r\n    },\r\n    true\r\n   )\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(formState.inputs);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <form onSubmit={submitHandler}>\r\n            <Input \r\n                id=\"category\"\r\n                element=\"input\"\r\n                type=\"text\"\r\n                label=\"Category\"\r\n                value={formState.inputs.category.value}\r\n                isValid={formState.inputs.category.isValid}\r\n                isTouch={true}\r\n                errorMessage=\"Please enter a category\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input \r\n                id=\"title\"\r\n                element=\"textarea\"\r\n                label=\"Title\"\r\n                value={formState.inputs.title.value}\r\n                isValid={formState.inputs.title.isValid}\r\n                isTouch={true}\r\n                errorMessage = \"Please enter a valid title\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={handleInput}\r\n            />\r\n            <Input  \r\n                id=\"wholeQuestion\"\r\n                element=\"textarea\"\r\n                rows={5}\r\n                label=\"Question\"\r\n                value={formState.inputs.wholeQuestion.value}\r\n                isValid={formState.inputs.wholeQuestion.isValid}\r\n                isTouch={true}\r\n                errorMessage=\"Question must be of 10 Characters\"\r\n                validators={[VALIDATOR_MINLENGTH(10)]}\r\n                onInput={handleInput}\r\n            />\r\n            <button disabled={!formState.isValid}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateQues;","F:\\InnoventX\\Website\\portal\\src\\shared\\hoocks\\form-hook.js",[],"F:\\InnoventX\\Website\\portal\\src\\user\\components\\Authenticate.jsx",["109","110","111"],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\LoadingSpinner.js",[],"F:\\InnoventX\\Website\\portal\\src\\shared\\components\\UIElements\\Backdrop.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":21,"column":10,"nodeType":"118","messageId":"119","endLine":21,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":28,"column":17,"nodeType":"122","endLine":28,"endColumn":54},{"ruleId":"123","severity":1,"message":"124","line":28,"column":54,"nodeType":"122","endLine":28,"endColumn":89},{"ruleId":"116","severity":1,"message":"125","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":14},{"ruleId":"116","severity":1,"message":"126","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":23},{"ruleId":"116","severity":1,"message":"126","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":23},{"ruleId":"116","severity":1,"message":"127","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":26},{"ruleId":"116","severity":1,"message":"128","line":1,"column":28,"nodeType":"118","messageId":"119","endLine":1,"endColumn":38},{"ruleId":"116","severity":1,"message":"129","line":7,"column":23,"nodeType":"118","messageId":"119","endLine":7,"endColumn":36},{"ruleId":"116","severity":1,"message":"126","line":1,"column":15,"nodeType":"118","messageId":"119","endLine":1,"endColumn":23},{"ruleId":"116","severity":1,"message":"128","line":1,"column":24,"nodeType":"118","messageId":"119","endLine":1,"endColumn":34},{"ruleId":"116","severity":1,"message":"127","line":1,"column":35,"nodeType":"118","messageId":"119","endLine":1,"endColumn":46},{"ruleId":"116","severity":1,"message":"130","line":77,"column":35,"nodeType":"118","messageId":"119","endLine":77,"endColumn":46},{"ruleId":"116","severity":1,"message":"131","line":2,"column":9,"nodeType":"118","messageId":"119","endLine":2,"endColumn":19},{"ruleId":"116","severity":1,"message":"132","line":9,"column":9,"nodeType":"118","messageId":"119","endLine":9,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":244,"column":17,"nodeType":"122","endLine":244,"endColumn":52},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'myQues' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'useReducer' is defined but never used.","'setCategorite' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'useHistory' is defined but never used.","'useForm' is defined but never used.","no-global-assign","no-unsafe-negation"]